//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Yacht.YachtServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="YachtServiceReference.IYachtService")]
    public interface IYachtService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IYachtService/Register", ReplyAction="http://tempuri.org/IYachtService/RegisterResponse")]
        System.IAsyncResult BeginRegister(System.Uri clientURI, string name, int playerID, System.AsyncCallback callback, object asyncState);
        
        int EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IYachtService/Unregister", ReplyAction="http://tempuri.org/IYachtService/UnregisterResponse")]
        System.IAsyncResult BeginUnregister(int sessionID, System.AsyncCallback callback, object asyncState);
        
        void EndUnregister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IYachtService/JoinGame", ReplyAction="http://tempuri.org/IYachtService/JoinGameResponse")]
        System.IAsyncResult BeginJoinGame(System.Guid gameID, int sessionID, System.AsyncCallback callback, object asyncState);
        
        bool EndJoinGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IYachtService/LeaveGame", ReplyAction="http://tempuri.org/IYachtService/LeaveGameResponse")]
        System.IAsyncResult BeginLeaveGame(int sessionID, System.AsyncCallback callback, object asyncState);
        
        bool EndLeaveGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IYachtService/GameStep", ReplyAction="http://tempuri.org/IYachtService/GameStepResponse")]
        System.IAsyncResult BeginGameStep(System.Guid gameID, int sessionID, int scoreLine, byte score, int player, int step, System.AsyncCallback callback, object asyncState);
        
        void EndGameStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IYachtService/GetGameState", ReplyAction="http://tempuri.org/IYachtService/GetGameStateResponse")]
        System.IAsyncResult BeginGetGameState(System.Guid gameID, int sessionID, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetGameState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IYachtService/GetAvailableGames", ReplyAction="http://tempuri.org/IYachtService/GetAvailableGamesResponse")]
        System.IAsyncResult BeginGetAvailableGames(int sessionID, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetAvailableGames(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IYachtService/NewGame", ReplyAction="http://tempuri.org/IYachtService/NewGameResponse")]
        System.IAsyncResult BeginNewGame(int sessionID, string name, System.AsyncCallback callback, object asyncState);
        
        byte[] EndNewGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IYachtService/ResetTimeout", ReplyAction="http://tempuri.org/IYachtService/ResetTimeoutResponse")]
        System.IAsyncResult BeginResetTimeout(System.Guid gameID, int sessionID, System.AsyncCallback callback, object asyncState);
        
        void EndResetTimeout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IYachtService/SetScoreCard", ReplyAction="http://tempuri.org/IYachtService/SetScoreCardResponse")]
        System.IAsyncResult BeginSetScoreCard(int sessionID, byte[] scoreCard, System.AsyncCallback callback, object asyncState);
        
        void EndSetScoreCard(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IYachtService/GetScoreCard", ReplyAction="http://tempuri.org/IYachtService/GetScoreCardResponse")]
        System.IAsyncResult BeginGetScoreCard(int sessionID, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetScoreCard(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IYachtServiceChannel : Yacht.YachtServiceReference.IYachtService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JoinGameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public JoinGameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LeaveGameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LeaveGameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGameStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGameStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAvailableGamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAvailableGamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NewGameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NewGameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScoreCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScoreCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class YachtServiceClient : System.ServiceModel.ClientBase<Yacht.YachtServiceReference.IYachtService>, Yacht.YachtServiceReference.IYachtService {
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnregisterDelegate;
        
        private EndOperationDelegate onEndUnregisterDelegate;
        
        private System.Threading.SendOrPostCallback onUnregisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginJoinGameDelegate;
        
        private EndOperationDelegate onEndJoinGameDelegate;
        
        private System.Threading.SendOrPostCallback onJoinGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginLeaveGameDelegate;
        
        private EndOperationDelegate onEndLeaveGameDelegate;
        
        private System.Threading.SendOrPostCallback onLeaveGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGameStepDelegate;
        
        private EndOperationDelegate onEndGameStepDelegate;
        
        private System.Threading.SendOrPostCallback onGameStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGameStateDelegate;
        
        private EndOperationDelegate onEndGetGameStateDelegate;
        
        private System.Threading.SendOrPostCallback onGetGameStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAvailableGamesDelegate;
        
        private EndOperationDelegate onEndGetAvailableGamesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAvailableGamesCompletedDelegate;
        
        private BeginOperationDelegate onBeginNewGameDelegate;
        
        private EndOperationDelegate onEndNewGameDelegate;
        
        private System.Threading.SendOrPostCallback onNewGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetTimeoutDelegate;
        
        private EndOperationDelegate onEndResetTimeoutDelegate;
        
        private System.Threading.SendOrPostCallback onResetTimeoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetScoreCardDelegate;
        
        private EndOperationDelegate onEndSetScoreCardDelegate;
        
        private System.Threading.SendOrPostCallback onSetScoreCardCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScoreCardDelegate;
        
        private EndOperationDelegate onEndGetScoreCardDelegate;
        
        private System.Threading.SendOrPostCallback onGetScoreCardCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public YachtServiceClient() {
        }
        
        public YachtServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public YachtServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public YachtServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public YachtServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<RegisterCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnregisterCompleted;
        
        public event System.EventHandler<JoinGameCompletedEventArgs> JoinGameCompleted;
        
        public event System.EventHandler<LeaveGameCompletedEventArgs> LeaveGameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> GameStepCompleted;
        
        public event System.EventHandler<GetGameStateCompletedEventArgs> GetGameStateCompleted;
        
        public event System.EventHandler<GetAvailableGamesCompletedEventArgs> GetAvailableGamesCompleted;
        
        public event System.EventHandler<NewGameCompletedEventArgs> NewGameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ResetTimeoutCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetScoreCardCompleted;
        
        public event System.EventHandler<GetScoreCardCompletedEventArgs> GetScoreCardCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Yacht.YachtServiceReference.IYachtService.BeginRegister(System.Uri clientURI, string name, int playerID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(clientURI, name, playerID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Yacht.YachtServiceReference.IYachtService.EndRegister(System.IAsyncResult result) {
            return base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Uri clientURI = ((System.Uri)(inValues[0]));
            string name = ((string)(inValues[1]));
            int playerID = ((int)(inValues[2]));
            return ((Yacht.YachtServiceReference.IYachtService)(this)).BeginRegister(clientURI, name, playerID, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            int retVal = ((Yacht.YachtServiceReference.IYachtService)(this)).EndRegister(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(System.Uri clientURI, string name, int playerID) {
            this.RegisterAsync(clientURI, name, playerID, null);
        }
        
        public void RegisterAsync(System.Uri clientURI, string name, int playerID, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        clientURI,
                        name,
                        playerID}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Yacht.YachtServiceReference.IYachtService.BeginUnregister(int sessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnregister(sessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Yacht.YachtServiceReference.IYachtService.EndUnregister(System.IAsyncResult result) {
            base.Channel.EndUnregister(result);
        }
        
        private System.IAsyncResult OnBeginUnregister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int sessionID = ((int)(inValues[0]));
            return ((Yacht.YachtServiceReference.IYachtService)(this)).BeginUnregister(sessionID, callback, asyncState);
        }
        
        private object[] OnEndUnregister(System.IAsyncResult result) {
            ((Yacht.YachtServiceReference.IYachtService)(this)).EndUnregister(result);
            return null;
        }
        
        private void OnUnregisterCompleted(object state) {
            if ((this.UnregisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnregisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnregisterAsync(int sessionID) {
            this.UnregisterAsync(sessionID, null);
        }
        
        public void UnregisterAsync(int sessionID, object userState) {
            if ((this.onBeginUnregisterDelegate == null)) {
                this.onBeginUnregisterDelegate = new BeginOperationDelegate(this.OnBeginUnregister);
            }
            if ((this.onEndUnregisterDelegate == null)) {
                this.onEndUnregisterDelegate = new EndOperationDelegate(this.OnEndUnregister);
            }
            if ((this.onUnregisterCompletedDelegate == null)) {
                this.onUnregisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnregisterCompleted);
            }
            base.InvokeAsync(this.onBeginUnregisterDelegate, new object[] {
                        sessionID}, this.onEndUnregisterDelegate, this.onUnregisterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Yacht.YachtServiceReference.IYachtService.BeginJoinGame(System.Guid gameID, int sessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginJoinGame(gameID, sessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Yacht.YachtServiceReference.IYachtService.EndJoinGame(System.IAsyncResult result) {
            return base.Channel.EndJoinGame(result);
        }
        
        private System.IAsyncResult OnBeginJoinGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid gameID = ((System.Guid)(inValues[0]));
            int sessionID = ((int)(inValues[1]));
            return ((Yacht.YachtServiceReference.IYachtService)(this)).BeginJoinGame(gameID, sessionID, callback, asyncState);
        }
        
        private object[] OnEndJoinGame(System.IAsyncResult result) {
            bool retVal = ((Yacht.YachtServiceReference.IYachtService)(this)).EndJoinGame(result);
            return new object[] {
                    retVal};
        }
        
        private void OnJoinGameCompleted(object state) {
            if ((this.JoinGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.JoinGameCompleted(this, new JoinGameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void JoinGameAsync(System.Guid gameID, int sessionID) {
            this.JoinGameAsync(gameID, sessionID, null);
        }
        
        public void JoinGameAsync(System.Guid gameID, int sessionID, object userState) {
            if ((this.onBeginJoinGameDelegate == null)) {
                this.onBeginJoinGameDelegate = new BeginOperationDelegate(this.OnBeginJoinGame);
            }
            if ((this.onEndJoinGameDelegate == null)) {
                this.onEndJoinGameDelegate = new EndOperationDelegate(this.OnEndJoinGame);
            }
            if ((this.onJoinGameCompletedDelegate == null)) {
                this.onJoinGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnJoinGameCompleted);
            }
            base.InvokeAsync(this.onBeginJoinGameDelegate, new object[] {
                        gameID,
                        sessionID}, this.onEndJoinGameDelegate, this.onJoinGameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Yacht.YachtServiceReference.IYachtService.BeginLeaveGame(int sessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLeaveGame(sessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Yacht.YachtServiceReference.IYachtService.EndLeaveGame(System.IAsyncResult result) {
            return base.Channel.EndLeaveGame(result);
        }
        
        private System.IAsyncResult OnBeginLeaveGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int sessionID = ((int)(inValues[0]));
            return ((Yacht.YachtServiceReference.IYachtService)(this)).BeginLeaveGame(sessionID, callback, asyncState);
        }
        
        private object[] OnEndLeaveGame(System.IAsyncResult result) {
            bool retVal = ((Yacht.YachtServiceReference.IYachtService)(this)).EndLeaveGame(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLeaveGameCompleted(object state) {
            if ((this.LeaveGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LeaveGameCompleted(this, new LeaveGameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LeaveGameAsync(int sessionID) {
            this.LeaveGameAsync(sessionID, null);
        }
        
        public void LeaveGameAsync(int sessionID, object userState) {
            if ((this.onBeginLeaveGameDelegate == null)) {
                this.onBeginLeaveGameDelegate = new BeginOperationDelegate(this.OnBeginLeaveGame);
            }
            if ((this.onEndLeaveGameDelegate == null)) {
                this.onEndLeaveGameDelegate = new EndOperationDelegate(this.OnEndLeaveGame);
            }
            if ((this.onLeaveGameCompletedDelegate == null)) {
                this.onLeaveGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLeaveGameCompleted);
            }
            base.InvokeAsync(this.onBeginLeaveGameDelegate, new object[] {
                        sessionID}, this.onEndLeaveGameDelegate, this.onLeaveGameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Yacht.YachtServiceReference.IYachtService.BeginGameStep(System.Guid gameID, int sessionID, int scoreLine, byte score, int player, int step, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGameStep(gameID, sessionID, scoreLine, score, player, step, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Yacht.YachtServiceReference.IYachtService.EndGameStep(System.IAsyncResult result) {
            base.Channel.EndGameStep(result);
        }
        
        private System.IAsyncResult OnBeginGameStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid gameID = ((System.Guid)(inValues[0]));
            int sessionID = ((int)(inValues[1]));
            int scoreLine = ((int)(inValues[2]));
            byte score = ((byte)(inValues[3]));
            int player = ((int)(inValues[4]));
            int step = ((int)(inValues[5]));
            return ((Yacht.YachtServiceReference.IYachtService)(this)).BeginGameStep(gameID, sessionID, scoreLine, score, player, step, callback, asyncState);
        }
        
        private object[] OnEndGameStep(System.IAsyncResult result) {
            ((Yacht.YachtServiceReference.IYachtService)(this)).EndGameStep(result);
            return null;
        }
        
        private void OnGameStepCompleted(object state) {
            if ((this.GameStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GameStepCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GameStepAsync(System.Guid gameID, int sessionID, int scoreLine, byte score, int player, int step) {
            this.GameStepAsync(gameID, sessionID, scoreLine, score, player, step, null);
        }
        
        public void GameStepAsync(System.Guid gameID, int sessionID, int scoreLine, byte score, int player, int step, object userState) {
            if ((this.onBeginGameStepDelegate == null)) {
                this.onBeginGameStepDelegate = new BeginOperationDelegate(this.OnBeginGameStep);
            }
            if ((this.onEndGameStepDelegate == null)) {
                this.onEndGameStepDelegate = new EndOperationDelegate(this.OnEndGameStep);
            }
            if ((this.onGameStepCompletedDelegate == null)) {
                this.onGameStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGameStepCompleted);
            }
            base.InvokeAsync(this.onBeginGameStepDelegate, new object[] {
                        gameID,
                        sessionID,
                        scoreLine,
                        score,
                        player,
                        step}, this.onEndGameStepDelegate, this.onGameStepCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Yacht.YachtServiceReference.IYachtService.BeginGetGameState(System.Guid gameID, int sessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGameState(gameID, sessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] Yacht.YachtServiceReference.IYachtService.EndGetGameState(System.IAsyncResult result) {
            return base.Channel.EndGetGameState(result);
        }
        
        private System.IAsyncResult OnBeginGetGameState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid gameID = ((System.Guid)(inValues[0]));
            int sessionID = ((int)(inValues[1]));
            return ((Yacht.YachtServiceReference.IYachtService)(this)).BeginGetGameState(gameID, sessionID, callback, asyncState);
        }
        
        private object[] OnEndGetGameState(System.IAsyncResult result) {
            byte[] retVal = ((Yacht.YachtServiceReference.IYachtService)(this)).EndGetGameState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGameStateCompleted(object state) {
            if ((this.GetGameStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGameStateCompleted(this, new GetGameStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGameStateAsync(System.Guid gameID, int sessionID) {
            this.GetGameStateAsync(gameID, sessionID, null);
        }
        
        public void GetGameStateAsync(System.Guid gameID, int sessionID, object userState) {
            if ((this.onBeginGetGameStateDelegate == null)) {
                this.onBeginGetGameStateDelegate = new BeginOperationDelegate(this.OnBeginGetGameState);
            }
            if ((this.onEndGetGameStateDelegate == null)) {
                this.onEndGetGameStateDelegate = new EndOperationDelegate(this.OnEndGetGameState);
            }
            if ((this.onGetGameStateCompletedDelegate == null)) {
                this.onGetGameStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGameStateCompleted);
            }
            base.InvokeAsync(this.onBeginGetGameStateDelegate, new object[] {
                        gameID,
                        sessionID}, this.onEndGetGameStateDelegate, this.onGetGameStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Yacht.YachtServiceReference.IYachtService.BeginGetAvailableGames(int sessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAvailableGames(sessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] Yacht.YachtServiceReference.IYachtService.EndGetAvailableGames(System.IAsyncResult result) {
            return base.Channel.EndGetAvailableGames(result);
        }
        
        private System.IAsyncResult OnBeginGetAvailableGames(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int sessionID = ((int)(inValues[0]));
            return ((Yacht.YachtServiceReference.IYachtService)(this)).BeginGetAvailableGames(sessionID, callback, asyncState);
        }
        
        private object[] OnEndGetAvailableGames(System.IAsyncResult result) {
            byte[] retVal = ((Yacht.YachtServiceReference.IYachtService)(this)).EndGetAvailableGames(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAvailableGamesCompleted(object state) {
            if ((this.GetAvailableGamesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAvailableGamesCompleted(this, new GetAvailableGamesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAvailableGamesAsync(int sessionID) {
            this.GetAvailableGamesAsync(sessionID, null);
        }
        
        public void GetAvailableGamesAsync(int sessionID, object userState) {
            if ((this.onBeginGetAvailableGamesDelegate == null)) {
                this.onBeginGetAvailableGamesDelegate = new BeginOperationDelegate(this.OnBeginGetAvailableGames);
            }
            if ((this.onEndGetAvailableGamesDelegate == null)) {
                this.onEndGetAvailableGamesDelegate = new EndOperationDelegate(this.OnEndGetAvailableGames);
            }
            if ((this.onGetAvailableGamesCompletedDelegate == null)) {
                this.onGetAvailableGamesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAvailableGamesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAvailableGamesDelegate, new object[] {
                        sessionID}, this.onEndGetAvailableGamesDelegate, this.onGetAvailableGamesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Yacht.YachtServiceReference.IYachtService.BeginNewGame(int sessionID, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNewGame(sessionID, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] Yacht.YachtServiceReference.IYachtService.EndNewGame(System.IAsyncResult result) {
            return base.Channel.EndNewGame(result);
        }
        
        private System.IAsyncResult OnBeginNewGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int sessionID = ((int)(inValues[0]));
            string name = ((string)(inValues[1]));
            return ((Yacht.YachtServiceReference.IYachtService)(this)).BeginNewGame(sessionID, name, callback, asyncState);
        }
        
        private object[] OnEndNewGame(System.IAsyncResult result) {
            byte[] retVal = ((Yacht.YachtServiceReference.IYachtService)(this)).EndNewGame(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNewGameCompleted(object state) {
            if ((this.NewGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NewGameCompleted(this, new NewGameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NewGameAsync(int sessionID, string name) {
            this.NewGameAsync(sessionID, name, null);
        }
        
        public void NewGameAsync(int sessionID, string name, object userState) {
            if ((this.onBeginNewGameDelegate == null)) {
                this.onBeginNewGameDelegate = new BeginOperationDelegate(this.OnBeginNewGame);
            }
            if ((this.onEndNewGameDelegate == null)) {
                this.onEndNewGameDelegate = new EndOperationDelegate(this.OnEndNewGame);
            }
            if ((this.onNewGameCompletedDelegate == null)) {
                this.onNewGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNewGameCompleted);
            }
            base.InvokeAsync(this.onBeginNewGameDelegate, new object[] {
                        sessionID,
                        name}, this.onEndNewGameDelegate, this.onNewGameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Yacht.YachtServiceReference.IYachtService.BeginResetTimeout(System.Guid gameID, int sessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetTimeout(gameID, sessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Yacht.YachtServiceReference.IYachtService.EndResetTimeout(System.IAsyncResult result) {
            base.Channel.EndResetTimeout(result);
        }
        
        private System.IAsyncResult OnBeginResetTimeout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid gameID = ((System.Guid)(inValues[0]));
            int sessionID = ((int)(inValues[1]));
            return ((Yacht.YachtServiceReference.IYachtService)(this)).BeginResetTimeout(gameID, sessionID, callback, asyncState);
        }
        
        private object[] OnEndResetTimeout(System.IAsyncResult result) {
            ((Yacht.YachtServiceReference.IYachtService)(this)).EndResetTimeout(result);
            return null;
        }
        
        private void OnResetTimeoutCompleted(object state) {
            if ((this.ResetTimeoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetTimeoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetTimeoutAsync(System.Guid gameID, int sessionID) {
            this.ResetTimeoutAsync(gameID, sessionID, null);
        }
        
        public void ResetTimeoutAsync(System.Guid gameID, int sessionID, object userState) {
            if ((this.onBeginResetTimeoutDelegate == null)) {
                this.onBeginResetTimeoutDelegate = new BeginOperationDelegate(this.OnBeginResetTimeout);
            }
            if ((this.onEndResetTimeoutDelegate == null)) {
                this.onEndResetTimeoutDelegate = new EndOperationDelegate(this.OnEndResetTimeout);
            }
            if ((this.onResetTimeoutCompletedDelegate == null)) {
                this.onResetTimeoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetTimeoutCompleted);
            }
            base.InvokeAsync(this.onBeginResetTimeoutDelegate, new object[] {
                        gameID,
                        sessionID}, this.onEndResetTimeoutDelegate, this.onResetTimeoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Yacht.YachtServiceReference.IYachtService.BeginSetScoreCard(int sessionID, byte[] scoreCard, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetScoreCard(sessionID, scoreCard, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Yacht.YachtServiceReference.IYachtService.EndSetScoreCard(System.IAsyncResult result) {
            base.Channel.EndSetScoreCard(result);
        }
        
        private System.IAsyncResult OnBeginSetScoreCard(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int sessionID = ((int)(inValues[0]));
            byte[] scoreCard = ((byte[])(inValues[1]));
            return ((Yacht.YachtServiceReference.IYachtService)(this)).BeginSetScoreCard(sessionID, scoreCard, callback, asyncState);
        }
        
        private object[] OnEndSetScoreCard(System.IAsyncResult result) {
            ((Yacht.YachtServiceReference.IYachtService)(this)).EndSetScoreCard(result);
            return null;
        }
        
        private void OnSetScoreCardCompleted(object state) {
            if ((this.SetScoreCardCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetScoreCardCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetScoreCardAsync(int sessionID, byte[] scoreCard) {
            this.SetScoreCardAsync(sessionID, scoreCard, null);
        }
        
        public void SetScoreCardAsync(int sessionID, byte[] scoreCard, object userState) {
            if ((this.onBeginSetScoreCardDelegate == null)) {
                this.onBeginSetScoreCardDelegate = new BeginOperationDelegate(this.OnBeginSetScoreCard);
            }
            if ((this.onEndSetScoreCardDelegate == null)) {
                this.onEndSetScoreCardDelegate = new EndOperationDelegate(this.OnEndSetScoreCard);
            }
            if ((this.onSetScoreCardCompletedDelegate == null)) {
                this.onSetScoreCardCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetScoreCardCompleted);
            }
            base.InvokeAsync(this.onBeginSetScoreCardDelegate, new object[] {
                        sessionID,
                        scoreCard}, this.onEndSetScoreCardDelegate, this.onSetScoreCardCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Yacht.YachtServiceReference.IYachtService.BeginGetScoreCard(int sessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScoreCard(sessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] Yacht.YachtServiceReference.IYachtService.EndGetScoreCard(System.IAsyncResult result) {
            return base.Channel.EndGetScoreCard(result);
        }
        
        private System.IAsyncResult OnBeginGetScoreCard(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int sessionID = ((int)(inValues[0]));
            return ((Yacht.YachtServiceReference.IYachtService)(this)).BeginGetScoreCard(sessionID, callback, asyncState);
        }
        
        private object[] OnEndGetScoreCard(System.IAsyncResult result) {
            byte[] retVal = ((Yacht.YachtServiceReference.IYachtService)(this)).EndGetScoreCard(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScoreCardCompleted(object state) {
            if ((this.GetScoreCardCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScoreCardCompleted(this, new GetScoreCardCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScoreCardAsync(int sessionID) {
            this.GetScoreCardAsync(sessionID, null);
        }
        
        public void GetScoreCardAsync(int sessionID, object userState) {
            if ((this.onBeginGetScoreCardDelegate == null)) {
                this.onBeginGetScoreCardDelegate = new BeginOperationDelegate(this.OnBeginGetScoreCard);
            }
            if ((this.onEndGetScoreCardDelegate == null)) {
                this.onEndGetScoreCardDelegate = new EndOperationDelegate(this.OnEndGetScoreCard);
            }
            if ((this.onGetScoreCardCompletedDelegate == null)) {
                this.onGetScoreCardCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScoreCardCompleted);
            }
            base.InvokeAsync(this.onBeginGetScoreCardDelegate, new object[] {
                        sessionID}, this.onEndGetScoreCardDelegate, this.onGetScoreCardCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Yacht.YachtServiceReference.IYachtService CreateChannel() {
            return new YachtServiceClientChannel(this);
        }
        
        private class YachtServiceClientChannel : ChannelBase<Yacht.YachtServiceReference.IYachtService>, Yacht.YachtServiceReference.IYachtService {
            
            public YachtServiceClientChannel(System.ServiceModel.ClientBase<Yacht.YachtServiceReference.IYachtService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRegister(System.Uri clientURI, string name, int playerID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = clientURI;
                _args[1] = name;
                _args[2] = playerID;
                System.IAsyncResult _result = base.BeginInvoke("Register", _args, callback, asyncState);
                return _result;
            }
            
            public int EndRegister(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("Register", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUnregister(int sessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sessionID;
                System.IAsyncResult _result = base.BeginInvoke("Unregister", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUnregister(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Unregister", _args, result);
            }
            
            public System.IAsyncResult BeginJoinGame(System.Guid gameID, int sessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = gameID;
                _args[1] = sessionID;
                System.IAsyncResult _result = base.BeginInvoke("JoinGame", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndJoinGame(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("JoinGame", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLeaveGame(int sessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sessionID;
                System.IAsyncResult _result = base.BeginInvoke("LeaveGame", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndLeaveGame(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("LeaveGame", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGameStep(System.Guid gameID, int sessionID, int scoreLine, byte score, int player, int step, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = gameID;
                _args[1] = sessionID;
                _args[2] = scoreLine;
                _args[3] = score;
                _args[4] = player;
                _args[5] = step;
                System.IAsyncResult _result = base.BeginInvoke("GameStep", _args, callback, asyncState);
                return _result;
            }
            
            public void EndGameStep(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("GameStep", _args, result);
            }
            
            public System.IAsyncResult BeginGetGameState(System.Guid gameID, int sessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = gameID;
                _args[1] = sessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetGameState", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetGameState(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetGameState", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAvailableGames(int sessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetAvailableGames", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetAvailableGames(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetAvailableGames", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginNewGame(int sessionID, string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = sessionID;
                _args[1] = name;
                System.IAsyncResult _result = base.BeginInvoke("NewGame", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndNewGame(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("NewGame", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginResetTimeout(System.Guid gameID, int sessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = gameID;
                _args[1] = sessionID;
                System.IAsyncResult _result = base.BeginInvoke("ResetTimeout", _args, callback, asyncState);
                return _result;
            }
            
            public void EndResetTimeout(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ResetTimeout", _args, result);
            }
            
            public System.IAsyncResult BeginSetScoreCard(int sessionID, byte[] scoreCard, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = sessionID;
                _args[1] = scoreCard;
                System.IAsyncResult _result = base.BeginInvoke("SetScoreCard", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetScoreCard(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetScoreCard", _args, result);
            }
            
            public System.IAsyncResult BeginGetScoreCard(int sessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetScoreCard", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetScoreCard(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetScoreCard", _args, result)));
                return _result;
            }
        }
    }
}

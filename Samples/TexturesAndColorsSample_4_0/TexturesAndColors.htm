<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:xanx="http://schemas.microsoft.com/developer/xanx/2005"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta name="save" content="history" /><title>Shader Series 2: Textures and Colors Sample</title>
<style><!--
/***********************************************************
 *             SCRIPT-SUPPORTING STYLES
 ***********************************************************/

/* Defines the userData cache persistence mechanism. */
.userDataStyle
{
	behavior: url(#default#userData);
}

/* Used to save the scroll bar position when navigating away from a page. */
div.saveHistory
{
	behavior: url(#default#saveHistory);
}

/* Formats the expand/collapse images for all collapsible regions. */
img.toggle
{
	border: 0;
	margin-right: 5;
}

/* Formats the Language filter drop-down image. */
img#languageFilterImage
{
	border: 0;
	margin-left: 0;
	vertical-align: middle;
}

/* Formats the Members Options filter drop-down image. */
img#membersOptionsFilterImage
{
	border: 0;
	margin-left: 0;
	vertical-align: middle;
}

/* Formats the Collapse All/Expand All images. */
img#toggleAllImage
{
	margin-left: 0;
	vertical-align: middle;
}

/* Supports XLinks */
MSHelp\:link
{
 	text-decoration: underline;
	color: #0000ff; 
	hoverColor: #3366ff;
	filterString: ;
}

body
	{
	background:	#FFFFFF;
	color: #000000;
	font-family:	Verdana;
	font-size: medium;
	font-style: normal;
	font-weight: normal;
	margin-top:	0;
	margin-bottom:	0;
	margin-left:	0;
	margin-right:	0;
	width:	100%;
	/*font-size: 110%;*/
	}

div.section
	{
	margin-left: 15px;
	}

div.hxnx5
	{
	margin-left: 1.5em;
	}

/* Font for all headings */	
h1, h2, h3, h4, h5, h6
	{
	font-family: Verdana, Arial, Helvetica, sans-serif;
	margin-top: 18;
	margin-bottom: 8; 
	font-weight: bold;
	}
h1
	{
	font-size: 130%;
	color: #003399;
	}
div#scrollyes h1 /* Changes font size for full-scrolling topic */
	{
	font-size: 150%;
	}
h2
	{
	font-size: 122%;
	}
h3
	{
	font-size: 115%;
	margin-top: 9;
	margin-bottom: 4; 
	}
h4
	{
	font-size: 115%;
	margin-top: 9;
	margin-bottom: 4; 
	}
h5
	{
	font-size: 100%;
	margin-top: 9;
	margin-bottom: 4; 
	}
h6
	{
	font-size: 100%;
	margin-top: 9;
	margin-bottom: 4; 
	}

ul p, ol p, dl p
	{
	margin-left: 0em;
	}

p
	{
	margin-top: .6em;
	margin-bottom: .6em;
	}
	
td p
	{
	margin-top: 0.0em;
	margin-bottom: 0.6em;
	}

dd p
	{
	margin-top: 0.0em;
	margin-bottom: 0.6em;
	}

.image
	{
	text-align: center;
	}

dl
	{
	margin-top: 0em; 
	margin-bottom: 1.3em;
	}

dd
	{
	margin-bottom: 0em;
	margin-left: 1.5em;
	}

dl.glossary dd 
{
	margin-bottom: 0em;  
	margin-left: 1.5em; 
}

dt
	{
	margin-top: .6em;
	margin-bottom: 1;
	}

ul, ol
	{
	margin-top: 0.6em;
	margin-bottom: 0.6em; 	
	}
	
ol
	{
	margin-left: 2.5em; 	
	}	
	
ul
	{
	list-style-type: disc; 
	margin-left: 1.9em; 
	}

li
	{
	margin-bottom: 0.4em;
	}

ul ol, ol ol
	{
	list-style-type: lower-alpha;
	}

pre
	{
	margin-top: .6em;
	margin-bottom: .6em; 
	font: 105% Lucida, mono; 
	color: #000066;
	}

code
{
	font-family: Monospace, Courier New, Courier;
	font-size: 105%;
	color:	#000066;
}

table.userdata td 
	{
	background: #ffffff;
	background-color: #F5F5F5;
	border-color: #ffffff;
	border: none;
	}	
table.clsWarning
	{
	background: #ffffff;
	padding: 0px;
	margin: 0px;
	border: none;
	}
table.clsWarning td
	{
	padding: 0px;
	margin: 0px;
	background: #ffffff;
	vertical-align: middle;
	font-size: 70%;
	}

div#mainSection table
	{
	width: 95%;
	background: #ffffff;
	margin-top: 5px;
	margin-bottom: 5px;
	}

div#mainSection table th
	{ 
	padding: 5px 6px;
	background: #EFEFF7;
	text-align: left;
	font-size: 70%;
	vertical-align: bottom;
	border-bottom: 1px solid #C8CDDE;
	}
div#mainSection table td
	{ 
	padding: 5px 5px;
	background: #F7F7FF;
	vertical-align: top;
	font-size: 70%;
	border-bottom: 1px solid #D5D5D3;
	}

div#syntaxCodeBlocks table th
	{
	padding: 1px 6px;
	color: #000066;
	}

div#syntaxCodeBlocks table td
	{
	padding: 1px 5px;
	}

/* Applies to the running header text in the first row of the upper table in the
   non-scrolling header region. */
span#runningHeaderText
{
	color: #003399;
	font-size: 90%;
	padding-left: 13;
}

/* Applies to the topic title in the second row of the upper table in the
   non-scrolling header region. */
span#nsrTitle
{
	color: #003399;
	font-size: 120%;
	font-weight: 600;
	padding-left: 13;
}

/* Applies to everything below the non-scrolling header region. */
div#mainSection
{
	font-size: 70%;
	width: 100%;
}

/* Applies to everything below the non-scrolling header region, minus the footer. */
div#mainBody
{
	font-size: 90%;
	margin-left: 15;
	margin-top: 10;
	padding-bottom: 20;
}

/* Adds right padding for all blocks in mainBody */
div#mainBody p, div#mainBody ol, div#mainBody ul, div#mainBody dl
{
	padding-right: 5;
}

div#mainBody div.alert, div#mainBody div.code, div#mainBody div.tableSection
{
	width:98.9%;
}

div.alert p, div.code p
{
	margin-top:5;
	margin-bottom:8;
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Begin Note Styles - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
div#mainSection div.alert table
{
	border: 0;
}

div#mainSection div.alert table th
{
	padding-top: 0;
	padding-bottom: 0;
	padding-left: 5;
	padding-right: 5;
}

div#mainSection div.alert table td
{
	padding-left: 5;
	padding-right: 5;
}

img.note
{
	border: 0;
	margin-left: 0;
	margin-right: 3;
}
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - End Note Styles - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Begin Non-scrolling Header Region Styles - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
/* Applies to the entire non-scrolling header region. */
div#header
{
	background-color: #D4DFFF;
	padding-top:	0;
	padding-bottom:	0;
	padding-left:	0;
	padding-right:	0;
	width:	100%;
}

/* Applies to both tables in the non-scrolling header region. */
div#header table
{
	margin-top:	0;
	margin-bottom: 0;
	border-bottom-color: #C8CDDE;
	border-bottom-style: solid;
	border-bottom-width: 1;
	background: #D4DFFF;
	width:	100%;
}

/* Applies to cells in both tables in the non-scrolling header region. */
div#header table td
{
	color: #0000FF;
	font-size: 70%;
	padding-right: 20;
	padding-top: 1;
	padding-bottom: 1;
	border: none;
	background: #D4DFFF;
}

/* Applies to the last row in the upper table of the non-scrolling header region. Text 
   in this row includes See Also, Constructors, Methods, and Properties. */
div#header table tr#headerTableRow3 td
{
	padding-bottom: 2;
	padding-top: 5;
	padding-left: 15;
}

/* Applies to the lower table in the non-scrolling header region. Text in this table
   includes Collapse All/Expand All, Language Filter, and Members Options. */
div#header table#bottomTable
{
	border-top-color: #FFFFFF;
	border-top-style: solid;
	border-top-width: 1;
	text-align: left;
	padding-left: 15;
}


blockquote
	{
	margin-left: 3.8em;
	margin-right: 3.8em;
	margin-top: .6em;
	margin-bottom: .6em;
	}

sup
	{
	text-decoration: none;
	font-size: smaller; 
	}

a:link
	{
	color: #0000FF;
/*    font-weight: bold */
	}
	
a:visited
	{
	color: #0000AA;
/*    font-weight: bold	*/
	}
	
a:hover
	{
	color: #3366FF;
/*    font-weight: bold */
	}
	
.label
	{
	font-weight: bold; 
	margin-top: 1em;
	margin-left: -26px;
	}
	
.tl
	{
	margin-bottom: .75em; 
	}
	
.atl
	{
	padding-left: 1.5em;
	padding-bottom: .75em; 
	}
	
.cfe
	{
	font-weight: bold; 
	}
	
.mini
	{
	font-size: smaller;
	}
	
.dt
	{
	margin-bottom: -.6em; 
	}
	
.indent
	{
	margin-left: 1.9em; 
	margin-right: 1.9em;
	}

.product
	{
	text-align: right;
	color: #333333;
	font-size: smaller;
	font-style: italic;
	}

.buttonbarshade
	{
	position: relative;
	margin: 0;
	left: 0px;
	top: 2;
	width: 50%;
	height: 40px;
	}

.buttonbartable
	{
	position: absolute;
	margin: 0;
	padding:0;
	border:0;
	left:0px;
	top: 2;
	width: 100%;
	height: 40px;
	}

/* background color, font for header */ 
table.buttonbartable td, table.buttonbarshade td
	{
	background: #ffffff; /*#5177B8; #80C615;*/
	border-left: 0px solid #80C615;
	margin: 0;
	padding: 0px 0px 0px 0px;
	font-family: Impact, sans-serif;
	font-size: 14pt;
	}

table.buttonbartable td.button1
	{
	background: #5177B8; /*#80C615;*/;
	padding: 0;
	font-weight: bold;
	text-align: center;
	cursor: hand;
	}

table.buttonbartable td.button2
	{
	background: #5177B8; /*#80C615;*/;
	font-weight: bold;
	text-align: center;
	}

table.buttonbartable td.button3
	{
	background: #5177B8; /*#80C615;*/;
	font-weight: bold;
	text-align: center;
	}

table.buttonbartable td.runninghead
	{
	padding-left: 0px;
	font-style: italic;
	text-align: left;
	}

.version
	{
	text-align: left;
	color: #000000;
	margin-top: 3em;
	margin-left: -26px;
	font-size: smaller;
	font-style: italic;
	}

.lang, .ilang
	{
	color: #0000ff;
	font: normal 7pt Arial, Helvetica, sans-serif;
	}

div.langMenu
	{
	position: absolute;
	z-index: 1;
	width: 96pt;
	padding: 8pt;
	visibility: hidden;
	border: 1px solid #000000;
	background: #ffffd0;
	}

div.langMenu ul
	{
	padding-left: 2em;
	margin-left: 0;
	}

div.filtered
	{
	margin: 4pt 0 8pt -26px;
	padding: 4px 4px 8px 26px;
	width: 100%;
	border: 2px solid #aaaacc;
	background: #ffffff;
	}

div.filtered2
	{
	margin: 4pt 0 8pt -26px;
	padding: 4px 4px 8px 26px;
	width: 100%;
	border: none;
	background: #ffffff;
	}

div.filtered h1, div.filtered h2, div.filtered h3, div.filtered h4
	{
	margin-left: -22px;
	}

div.filtered span.lang
	{
	position: relative;
	left: -22px;
	}

div.reftip
	{
	position: absolute;
	z-index: 1;
	padding: 8pt;
	visibility: hidden;
	border: 1px solid #000000;
	background: #ffffd0;
	}

a.synParam
	{
	color: #0000FF;
	/*color: #3F7800;*/ 	
	/*color: #8DC54F;*/
	text-decoration: none;
    font-weight: normal;
	}

a.synParam:hover
	{
	text-decoration: underline;
    font-weight: normal;
	}

div.sapop
	{
	position: absolute;
	z-index: 1;
	left: 26px;
	width: 100%;
	padding: 10px 10px 10px 36px;
	visibility: hidden;
	border: 1px solid #000000;
	background: #ffffd0;
	}

div.footer
	{
	width: 100%;
	border: none;
	background: #ffffff;
	margin-top: 18pt;
	padding-bottom: 12pt;
	color: #0000FF;
	/*color: #228B22; */
	text-align: center;
	font-size: 76%;
	}

div.preliminary
	{
	margin-top: 8pt;
	padding-bottom: 12pt;
	color: #A0A0A0;
	}

/* A procedure section. eg. 'To create a file', 'To add a value' */
div.proc
    {
	margin-left: 0.5em; 
    }
     
/* The title of a 'procedure' section. */
div.proc h3
    {
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-weight: bold;
	font-size: 115%;
	margin-top: 1em;
	margin-bottom: 0.4em;
	margin-left: -0.5em; 
	color: #003399;
    }

div.proc ul
    {
    margin-left: 1.5em;
    }

div.proc ol
    {
    margin-left: 2.0em;
    }
      
.note
	{
	margin-left: 14pt;
	margin-right: 12pt;
	}

.indent1
	{
	margin-left: 12pt;
	}

.indent2
	{
	margin-left: 24pt;
	}

.indent3
	{
	margin-left: 36pt;
	}

p.proch
	{
	padding-left: 16px;
	}

p.proch img
	{
	position: relative; 
	vertical-align: top;
	left: -18px; 
	margin-right: -14px; 
	margin-bottom: -18px;
	}
	
div.clsPlatSpec
{
	background-color:#FFF8DC;
	border-style:solid;
	border-width:1pt 0pt 0pt 1pt;
	border-color:#ffE4C4;
	margin-top:0.6em;
	width:100%;
}


/* Applies to the language labels in the Language Filter drop-down list. */
.languageFilter
{
	color:	#0000FF;
	cursor:hand;
	text-decoration:underline;
	padding-bottom:4;
}

/* Dropdown areas */

#languageSpan {
	position: absolute;
	visibility: hidden;
	border-style: solid;
	border-width: 1px;
	border-color: #C8CDDE;
	background: #d4dfff;
	padding: 4px;
	font-size: 70%;
}

#membersOptionsSpan {
	position: absolute;
	visibility: hidden;
	border-style: solid;
	border-width: 1px;
	border-color: #C8CDDE;
	background: #d4dfff;
	padding: 4px;
	font-size: 70%;
}
--></style>

<xml>
<MSHelp:TOCTitle Title="Shader Series 2: Textures and Colors Sample" />
<MSHelp:RLTitle Title="Shader Series 2: Textures and Colors Sample" />
<MSHelp:Keyword Index="A" Term="O:Microsoft.Xna.TexturesAndColors" />
<MSHelp:Keyword Index="A" Term="0e9e5d62-3c58-e28b-7cce-06060b60a9f3" />
<MSHelp:Keyword Index="K" Term="Shader Series 2: Textures and Colors Sample" />

<MSHelp:Attr Name="AssetID" Value="0e9e5d62-3c58-e28b-7cce-06060b60a9f3" />
<MSHelp:Attr Name="Locale" Value="en-us" />
<MSHelp:Attr Name="CommunityContent" Value="1" />
<MSHelp:Attr Name="TopicType" Value="kbOrient" />
</xml>
</head><body><div id="mainSection"><div id="mainBody">
  <h1>Shader Series 2: Textures and Colors Sample</h1>
  This sample shows how to combine texture operations with mathematical color operations to blend colors and achieve interesting lighting effects.

  <a id="ID2EK" name="ID2EK"> </a><h1 class="heading">Sample Overview</h1><div id="ID2EK" class="hxnx1">
    
    <p>This sample shows how to combine texture operations with mathematical color operations to blend colors and achieve interesting lighting effects. New features include high-level shader language (HLSL) textures and samplers, uniform Boolean parameters to HLSL functions, and vertex colors.</p>
    <p>The sample initially shows a common usage scenario for combining lighting, vertex color, and texture colors to create the final color output. Cycling through the available techniques then will show the individual elements, simple combinations, and finally alternative combinations of all three.</p>
    <p>The most important lesson of this sample is that the manner in which you come up with the output color for a pixel is completely arbitrary. You may use colors derived from any number of sources and combine them any way you wish to achieve the desired effect.</p>
      <div class="alert"><table cellspacing="0" cellpadding="0"><tr><th>Note </th></tr><tr><td>
      <ul>
        <li>This is the second sample in the Shader Series. Before you begin, you should be familiar with the content of the first entry in the series, VertexLighting Sample, as well as the Shader Primer article.</li>
        <li>The code for this sample is similar to the VertexLighting Sample. Refer to the
          VertexLighting Dample and associated document for more information about this code. <ul>
        <li>The models presented in this sample are very similar to the models in the VertexLighting Sample, but they have been recreated to include per-vertex colors and texture coordinates. See the <a href="TexturesAndColors.htm#vertexVirtualization">Vertex       Virtualization via the Content Pipeline</a> section for more details.</li>
            <li>The Effect technique most similar to the VertexLighting effect in the VertexLighting Sample is the one titled, "LightingOnly."</li>
          </ul>
        </li>
      </ul>
    </td></tr></table></div>
    <a id="ID2EMB" name="ID2EMB"> </a><h2 class="subHeading">Sample Controls</h2><div id="ID2EMB" class="hxnx2">
      
      <p>This sample uses the following keyboard and gamepad controls.</p>
      <table>
        <tr>
          <th>Action</th>
          <th>Keyboard control</th>
          <th>Gamepad control</th>
        </tr>
        <tr>
          <td>Rotate the camera</td>
          <td>W, A, S, and D</td>
          <td>Right analog D-pad</td>
        </tr>
        <tr>
          <td>Rotate the mesh</td>
          <td>UP ARROW, DOWN ARROW, LEFT ARROW, and RIGHT ARROW</td>
          <td>Left analog D-pad</td>
        </tr>
        <tr>
          <td>Zoom in</td>
          <td>Z</td>
          <td>
            <b>A</b>
          </td>
        </tr>
        <tr>
          <td>Zoom out</td>
          <td>X</td>
          <td>
            <b>B</b>
          </td>
        </tr>
        <tr>
          <td>Use a different technique to render the current 3D primitive</td>
          <td>SPACEBAR</td>
          <td>
            <b>Y</b>
          </td>
        </tr>
        <tr>
          <td>Display a different 3D primitive</td>
          <td>TAB</td>
          <td>
            <b>X</b>
          </td>
        </tr>
        <tr>
          <td>Exit the sample</td>
          <td>ESC or ALT+F4</td>
          <td>
            <b>BACK</b>
          </td>
        </tr>
      </table>
    </div>
  </div>

  <a id="ID2EOE" name="ID2EOE"> </a><h1 class="heading">Vertex Colors</h1><div id="ID2EOE" class="hxnx1">
    
    <p>This sample has new versions of the primitive models, including two new pieces of data for each vertex: a <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.vector2.aspx">Vector2</a> representing a texture coordinate (explained below) and a <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.color.aspx">Color</a>. Example 1.3 in TexturesAndColors.fx describes the addition to the <b>VertexShaderInput</b> structure. The COLOR0 and TEXCOORD0 semantics will automatically draw the appropriate data for the vertex into the structure, as with the POSITION and NORMAL semantics on the existing structure members. There are matching new entries on the <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.vertexdeclaration.aspx">VertexDeclaration</a> of the <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.vertexbuffer.aspx">VertexBuffer</a> attached to the single <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.modelmeshpart.aspx">ModelMeshPart</a> on each <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.model.aspx">Model</a>, which tell the runtime where to find this new data in the block of bytes provided for each vertex. See the <a href="TexturesAndColors.htm#vertexVirtualization">Vertex Virtualization via the Content Pipeline</a> section for more details.</p>
    <p>The color data stored in the vertex is a <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.color.aspx">Color</a> object, which has one byte of data for each color channel in the range [0, 255]. It is converted automatically into a <b>float4</b> by the graphics device when it is used to fill the <b>VertexShaderInput</b> structure. The color data could be in many different formats; in the case of a <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.color.aspx">Color</a>, the <b>float4</b> member is filled with the red, green, blue, and alpha channels, in that order, converted to the range [0.0, 1.0].</p>
    <p>This new data can be combined in any number of ways with the lighting color, which is
      calculated in the same manner as in the VertexLighting Sample. You could be modifying the
      normal by the vertex color if you wished, and if the data stored in the <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.vertexbuffer.aspx">VertexBuffer</a> object made sense for that operation.
      It is only another set of data associated with each vertex.</p>
    <p>In this particular shader, one function, <b>VertexShader</b>, provides many different
      ways of combining the lighting color with the vertex color, via the uniform Boolean parameters
      passed to the function by the technique. Uniform Boolean parameters are explained in more
      detail in the section, <a href="TexturesAndColors.htm#uniformParameters">Uniform Boolean
        Parameters to HLSL Functions</a>.</p>
  </div>
  <a id="ID2EMG" name="ID2EMG"> </a><h1 class="heading">Textures and Samplers</h1><div id="ID2EMG" class="hxnx1">
    
    <p>Textures are a block of data that can be assigned to a sampler in the runtime. The sampler
      then can read from the texture when provided coordinates that make sense for the type of
      texture used. Samplers can be configured to "sample" the texture data in a variety of
      ways.</p>
    <p>The most common type of texture is a "color map," a two-dimensional block of color data incorporated into the color equation for each pixel. However, textures may contain
      any kind of data that you would like to sample in this way, and the sampled data, like the
      vertex color, may be used in any number of ways depending on the effect in question. For
      example, "normal maps" contain perturbations to the interpolated per-vertex normal used in
      per-pixel lighting. (This will be demonstrated in a later Shader Series entry.)</p>
    <p>Texture coordinates typically are in the range [0.0, 1.0], and like vertex colors, are specified per vertex. In the vertex shader function used here, the texture coordinates are "passed through" to the vertex shader output. This data is interpolated, like the color data
      already present, when the pixels for the triangle are rendered. In Example 1.7 in
      TexturesAndColors.fx, this interpolated texture coordinate is passed to the <a href="http://msdn.microsoft.com/en-us/library/bb509677(v=VS.85).aspx">tex2D</a> intrinsic function,
      which returns a <b>float4</b> containing the results of the sampling operation.</p>
    <p>Also passed to the <a href="http://msdn.microsoft.com/en-us/library/bb509677(v=VS.85).aspx">tex2D</a>
      intrinsic function is the name of a sampler, defined at Example 1.2 in TexturesAndColors.fx.
      Samplers must specify, at a minimum, the uniform texture parameter that it is reading from.
      The texture parameter is specified at Example 1.1 in TexturesAndColors.fx. The underlying
      implmentation in the runtime specifies texture stages and a series of samplers on the <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.graphicsdevice.aspx">GraphicsDevice</a> via the <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.graphicsdevice.textures.aspx">Textures</a> and <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.graphicsdevice.samplerstates.aspx">SamplerStates</a> properties,
      respectively. These may be configured explicitly, but an advantage of Effect code is
      that you may define uniform variables and a sampler to read the texture in your Effect code,
      and the Effect system will automatically match these with eligible texture stages and
      samplers without requiring explicit configuration in your managed code.</p>
    <p>Many <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.model.aspx">Model</a>s will come from their creator with a texture or textures associated with them. The Model Processor element of the Content Pipeline typically stores this texture on the <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.basiceffect.aspx">BasicEffect</a> (accessible via the <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.basiceffect.texture.aspx">Texture</a> property)stored on each <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.modelmesh.aspx">ModelMesh</a> object. In this sample, the models were exported without any textures, and a texture is explicitly loaded in the managed code (in the <b>LoadContent</b> method), set on an <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.effectparameter.aspx">EffectParameter</a>, and sampled in the shader when the <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.model.aspx">Model</a> is rendered.</p>
    <p>Texture coordinates are explained in more detail at <a href="http://msdn2.microsoft.com/library/bb206245.aspx">http://msdn2.microsoft.com/library/bb206245.aspx</a>.</p>
    <p>In this particular shader, one function, <b>PixelShader</b>, provides many different ways to combine interpolated color from the vertex shader with the color read from the sampler via the uniform Boolean parameters passed to the function by the technique. Uniform Boolean parameters are explained in more detail in the section, <a href="TexturesAndColors.htm#uniformParameters">Uniform Boolean Parameters to HLSL Functions</a>. </p>
  </div>
  <a id="uniformParameters" name="uniformParameters"> </a><h1 class="heading">Implementation Detail: Uniform Boolean Parameters to HLSL Functions</h1><div id="uniformParameters" class="hxnx1">
    
    <p>For purposes of demonstration, this application shows many different possibilities for
      combining the lighting, vertex, and texture colors. One effect may have many techniques,
      specifying a vertex and pixel shader (as well as any device state changes, not shown in this
      sample), and each different rendering code path is represented by its own technique.</p>
    <p>The vertex and pixel shader HLSL functions (<b>VertexShader</b> and
        <b>PixelShader</b>, respectively) for these operations would be identical except for one
      line in each where the colors are mathematically combined. The functions could have been
      duplicated, with each technique specifying different functions, but that would result in a
      large amount of duplicated code—a common source of bugs.</p>
    <p>Another possibility would have been to use uniform HLSL variables, specifying the code path
      at run time via changes in the run-time code (using <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.effectparameter.aspx">EffectParameter</a> objects). Because these
      variables change at run time, the code branch must be represented in the compiled code.
      This can take the form of an often costly branch operation, or the shader can execute both
      sections of code and logically combine the results with the "branching" parameter. Both methods are often wasteful.</p>
    <p>The pattern used for this sample, at Examples 1.4 and 1.6 in TexturesAndColors.fx, is uniform
      Boolean parameters to the vertex and pixel shader functions. The techniques explicitly specify
      Boolean values when they specify the vertex and pixel shader functions (in fact, they must, or
      the effect will not compile). At compile time, the code paths for each technique are evaluated
      and stored with the technique. The vertex and pixel shader code is duplicated, with each
      technique only having the code path that it needs, without duplicating the code in the effect
      file itself.</p>
  </div>
  <a id="vertexVirtualization" name="vertexVirtualization"> </a><h1 class="heading">Implementation Detail: Vertex Virtualization via the Content Pipeline</h1><div id="vertexVirtualization" class="hxnx1">
    
    <p>There are few code changes between the managed code sections of this sample and those of the
      VertexLighting Sample. In particular, there are no changes required to the code responsible
      for <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.model.aspx">Model</a> loading and rendering.</p>
    <p>The VertexLighting Sample used models with only two pieces of data per vertex: a <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.vector3.aspx">Vector3</a> representing the model-space position for the
      vertex, and a <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.vector3.aspx">Vector3</a> representing the normal vector at
      that vertex, used for lighting calculations. This sample replaces the models with new versions
      that also have a <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.vector2.aspx">Vector2</a> representing the texture
      coordinate and a <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.color.aspx">Color</a> representing the vertex color.</p>
    <p>If the managed code created its own vertex data, then it would have been changed for this
      sample to reflect the additions. However, the Model Processor element of the Content Pipeline,
      automatically used for .x and .fbx file types, takes care of this for you. The Model Processor
      knows the vertex format from the incoming mesh file, and when the Model object is read at run
      time, it has appropriatly formatted <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.vertexbuffer.aspx">VertexBuffer</a>s on the
        <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.modelmeshpart.aspx">ModelMeshPart</a> objects.</p>
    <p>Therefore, the Model Processor element of the Content Pipeline minimizes the changes required
      to your managed code when the vertex data structure in your <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.model.aspx">Model</a>s change.</p>
  </div>
  <a id="ID2EZCAC" name="ID2EZCAC"> </a><h1 class="heading">Implementation Detail: Modulation and Saturation in HLSL</h1><div id="ID2EZCAC" class="hxnx1">
    
    <p>The word "modulation" is used multiple times in TexturesAndColors.fx. Modulation is a
      mathematical operation where one value, typically in the range [0.0, 1.0], is modified via multiplication by
      another value, also typically in the range [0.0, 1.0]. Example 1.5
      demonstrates this operation.</p>
    <p>Example 1.6, repeated twice in TexturesAndColors.fx, demonstrates <a href="http://msdn.microsoft.com/en-us/library/bb509645(v=VS.85).aspx">saturate</a>, a HLSL intrinsic
      function new to the Shader Series in this sample. The <a href="http://msdn.microsoft.com/en-us/library/bb509645(v=VS.85).aspx">saturate</a> function clamps a value,
      or each value in a vector type, to the range [0.0, 1.0].</p>
  </div>
  <a id="ID2ELDAC" name="ID2ELDAC"> </a><h1 class="heading">Extending the Sample</h1><div id="ID2ELDAC" class="hxnx1">
    
    <p>The following are some ideas for your exploration:</p>
    <ul>
      <li>Experiment with even more ways to combine lighting, color, and texture data. Some
        possibilities include modifying the lighting calculation and only using certain channels to
        mask or replace others.</li>
      <li> You may notice that with the lighting colors, vertex colors, and texture used here, the
        "addition" operations frequently add up to white. There are a few options here: <ul>
          <li>Experiment with different colors and textures to see what other effects you can
            get.</li>
          <li>The additions are currently "saturated," clamping each channel in the range [0.0,
            1.0]. A nice alternative might be to determine the "length" of the final color vector
            after an addition and divide it by the length (normalizing it) if it is great. You may
            also try dividing only if the length is greater than 1. The HLSL intrinsic functions <a href="http://msdn.microsoft.com/en-us/library/bb509617(v=VS.85).aspx">length</a> and <a href="http://msdn.microsoft.com/en-us/library/bb509630(v=VS.85).aspx">normalize</a> should
            help.</li>
        </ul>
      </li>
      <li>In TexturesAndColors.fx, three matrices are set each frame, but it might be more efficient
        to simply pass a pre-concatenated world-view-projection matrix to the function. Try creating
        a new <a href="http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.effectparameter.aspx">EffectParameter</a> and a new corresponding
        variable in the effect to facilitate the change.</li>
    </ul>
  </div>
</div><div class="footer" id="footer"><p>© 2010 Microsoft Corporation. All rights reserved.<br />Send feedback to <a href="mailto:xnags@microsoft.com?subject=Documentation Feedback: Shader Series 2: Textures and Colors Sample">xnags@microsoft.com</a>.</p></div></div></body></html>
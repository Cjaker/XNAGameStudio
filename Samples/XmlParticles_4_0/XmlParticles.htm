<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:xanx="http://schemas.microsoft.com/developer/xanx/2005"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta name="save" content="history" /><title>Authoring Particle Systems Using XML and the Content Pipeline</title>
<style><!--
/***********************************************************
 *             SCRIPT-SUPPORTING STYLES
 ***********************************************************/

/* Defines the userData cache persistence mechanism. */
.userDataStyle
{
	behavior: url(#default#userData);
}

/* Used to save the scroll bar position when navigating away from a page. */
div.saveHistory
{
	behavior: url(#default#saveHistory);
}

/* Formats the expand/collapse images for all collapsible regions. */
img.toggle
{
	border: 0;
	margin-right: 5;
}

/* Formats the Language filter drop-down image. */
img#languageFilterImage
{
	border: 0;
	margin-left: 0;
	vertical-align: middle;
}

/* Formats the Members Options filter drop-down image. */
img#membersOptionsFilterImage
{
	border: 0;
	margin-left: 0;
	vertical-align: middle;
}

/* Formats the Collapse All/Expand All images. */
img#toggleAllImage
{
	margin-left: 0;
	vertical-align: middle;
}

/* Supports XLinks */
MSHelp\:link
{
 	text-decoration: underline;
	color: #0000ff; 
	hoverColor: #3366ff;
	filterString: ;
}

body
	{
	background:	#FFFFFF;
	color: #000000;
	font-family:	Verdana;
	font-size: medium;
	font-style: normal;
	font-weight: normal;
	margin-top:	0;
	margin-bottom:	0;
	margin-left:	0;
	margin-right:	0;
	width:	100%;
	/*font-size: 110%;*/
	}

div.section
	{
	margin-left: 15px;
	}

div.hxnx5
	{
	margin-left: 1.5em;
	}

/* Font for all headings */	
h1, h2, h3, h4, h5, h6
	{
	font-family: Verdana, Arial, Helvetica, sans-serif;
	margin-top: 18;
	margin-bottom: 8; 
	font-weight: bold;
	}
h1
	{
	font-size: 130%;
	color: #003399;
	}
div#scrollyes h1 /* Changes font size for full-scrolling topic */
	{
	font-size: 150%;
	}
h2
	{
	font-size: 122%;
	}
h3
	{
	font-size: 115%;
	margin-top: 9;
	margin-bottom: 4; 
	}
h4
	{
	font-size: 115%;
	margin-top: 9;
	margin-bottom: 4; 
	}
h5
	{
	font-size: 100%;
	margin-top: 9;
	margin-bottom: 4; 
	}
h6
	{
	font-size: 100%;
	margin-top: 9;
	margin-bottom: 4; 
	}

ul p, ol p, dl p
	{
	margin-left: 0em;
	}

p
	{
	margin-top: .6em;
	margin-bottom: .6em;
	}
	
td p
	{
	margin-top: 0.0em;
	margin-bottom: 0.6em;
	}

dd p
	{
	margin-top: 0.0em;
	margin-bottom: 0.6em;
	}

.image
	{
	text-align: center;
	}

dl
	{
	margin-top: 0em; 
	margin-bottom: 1.3em;
	}

dd
	{
	margin-bottom: 0em;
	margin-left: 1.5em;
	}

dl.glossary dd 
{
	margin-bottom: 0em;  
	margin-left: 1.5em; 
}

dt
	{
	margin-top: .6em;
	margin-bottom: 1;
	}

ul, ol
	{
	margin-top: 0.6em;
	margin-bottom: 0.6em; 	
	}
	
ol
	{
	margin-left: 2.5em; 	
	}	
	
ul
	{
	list-style-type: disc; 
	margin-left: 1.9em; 
	}

li
	{
	margin-bottom: 0.4em;
	}

ul ol, ol ol
	{
	list-style-type: lower-alpha;
	}

pre
	{
	margin-top: .6em;
	margin-bottom: .6em; 
	font: 105% Lucida, mono; 
	color: #000066;
	}

code
{
	font-family: Monospace, Courier New, Courier;
	font-size: 105%;
	color:	#000066;
}

table.userdata td 
	{
	background: #ffffff;
	background-color: #F5F5F5;
	border-color: #ffffff;
	border: none;
	}	
table.clsWarning
	{
	background: #ffffff;
	padding: 0px;
	margin: 0px;
	border: none;
	}
table.clsWarning td
	{
	padding: 0px;
	margin: 0px;
	background: #ffffff;
	vertical-align: middle;
	font-size: 70%;
	}

div#mainSection table
	{
	width: 95%;
	background: #ffffff;
	margin-top: 5px;
	margin-bottom: 5px;
	}

div#mainSection table th
	{ 
	padding: 5px 6px;
	background: #EFEFF7;
	text-align: left;
	font-size: 70%;
	vertical-align: bottom;
	border-bottom: 1px solid #C8CDDE;
	}
div#mainSection table td
	{ 
	padding: 5px 5px;
	background: #F7F7FF;
	vertical-align: top;
	font-size: 70%;
	border-bottom: 1px solid #D5D5D3;
	}

div#syntaxCodeBlocks table th
	{
	padding: 1px 6px;
	color: #000066;
	}

div#syntaxCodeBlocks table td
	{
	padding: 1px 5px;
	}

/* Applies to the running header text in the first row of the upper table in the
   non-scrolling header region. */
span#runningHeaderText
{
	color: #003399;
	font-size: 90%;
	padding-left: 13;
}

/* Applies to the topic title in the second row of the upper table in the
   non-scrolling header region. */
span#nsrTitle
{
	color: #003399;
	font-size: 120%;
	font-weight: 600;
	padding-left: 13;
}

/* Applies to everything below the non-scrolling header region. */
div#mainSection
{
	font-size: 70%;
	width: 100%;
}

/* Applies to everything below the non-scrolling header region, minus the footer. */
div#mainBody
{
	font-size: 90%;
	margin-left: 15;
	margin-top: 10;
	padding-bottom: 20;
}

/* Adds right padding for all blocks in mainBody */
div#mainBody p, div#mainBody ol, div#mainBody ul, div#mainBody dl
{
	padding-right: 5;
}

div#mainBody div.alert, div#mainBody div.code, div#mainBody div.tableSection
{
	width:98.9%;
}

div.alert p, div.code p
{
	margin-top:5;
	margin-bottom:8;
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Begin Note Styles - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
div#mainSection div.alert table
{
	border: 0;
}

div#mainSection div.alert table th
{
	padding-top: 0;
	padding-bottom: 0;
	padding-left: 5;
	padding-right: 5;
}

div#mainSection div.alert table td
{
	padding-left: 5;
	padding-right: 5;
}

img.note
{
	border: 0;
	margin-left: 0;
	margin-right: 3;
}
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - End Note Styles - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Begin Non-scrolling Header Region Styles - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
/* Applies to the entire non-scrolling header region. */
div#header
{
	background-color: #D4DFFF;
	padding-top:	0;
	padding-bottom:	0;
	padding-left:	0;
	padding-right:	0;
	width:	100%;
}

/* Applies to both tables in the non-scrolling header region. */
div#header table
{
	margin-top:	0;
	margin-bottom: 0;
	border-bottom-color: #C8CDDE;
	border-bottom-style: solid;
	border-bottom-width: 1;
	background: #D4DFFF;
	width:	100%;
}

/* Applies to cells in both tables in the non-scrolling header region. */
div#header table td
{
	color: #0000FF;
	font-size: 70%;
	padding-right: 20;
	padding-top: 1;
	padding-bottom: 1;
	border: none;
	background: #D4DFFF;
}

/* Applies to the last row in the upper table of the non-scrolling header region. Text 
   in this row includes See Also, Constructors, Methods, and Properties. */
div#header table tr#headerTableRow3 td
{
	padding-bottom: 2;
	padding-top: 5;
	padding-left: 15;
}

/* Applies to the lower table in the non-scrolling header region. Text in this table
   includes Collapse All/Expand All, Language Filter, and Members Options. */
div#header table#bottomTable
{
	border-top-color: #FFFFFF;
	border-top-style: solid;
	border-top-width: 1;
	text-align: left;
	padding-left: 15;
}


blockquote
	{
	margin-left: 3.8em;
	margin-right: 3.8em;
	margin-top: .6em;
	margin-bottom: .6em;
	}

sup
	{
	text-decoration: none;
	font-size: smaller; 
	}

a:link
	{
	color: #0000FF;
/*    font-weight: bold */
	}
	
a:visited
	{
	color: #0000AA;
/*    font-weight: bold	*/
	}
	
a:hover
	{
	color: #3366FF;
/*    font-weight: bold */
	}
	
.label
	{
	font-weight: bold; 
	margin-top: 1em;
	margin-left: -26px;
	}
	
.tl
	{
	margin-bottom: .75em; 
	}
	
.atl
	{
	padding-left: 1.5em;
	padding-bottom: .75em; 
	}
	
.cfe
	{
	font-weight: bold; 
	}
	
.mini
	{
	font-size: smaller;
	}
	
.dt
	{
	margin-bottom: -.6em; 
	}
	
.indent
	{
	margin-left: 1.9em; 
	margin-right: 1.9em;
	}

.product
	{
	text-align: right;
	color: #333333;
	font-size: smaller;
	font-style: italic;
	}

.buttonbarshade
	{
	position: relative;
	margin: 0;
	left: 0px;
	top: 2;
	width: 50%;
	height: 40px;
	}

.buttonbartable
	{
	position: absolute;
	margin: 0;
	padding:0;
	border:0;
	left:0px;
	top: 2;
	width: 100%;
	height: 40px;
	}

/* background color, font for header */ 
table.buttonbartable td, table.buttonbarshade td
	{
	background: #ffffff; /*#5177B8; #80C615;*/
	border-left: 0px solid #80C615;
	margin: 0;
	padding: 0px 0px 0px 0px;
	font-family: Impact, sans-serif;
	font-size: 14pt;
	}

table.buttonbartable td.button1
	{
	background: #5177B8; /*#80C615;*/;
	padding: 0;
	font-weight: bold;
	text-align: center;
	cursor: hand;
	}

table.buttonbartable td.button2
	{
	background: #5177B8; /*#80C615;*/;
	font-weight: bold;
	text-align: center;
	}

table.buttonbartable td.button3
	{
	background: #5177B8; /*#80C615;*/;
	font-weight: bold;
	text-align: center;
	}

table.buttonbartable td.runninghead
	{
	padding-left: 0px;
	font-style: italic;
	text-align: left;
	}

.version
	{
	text-align: left;
	color: #000000;
	margin-top: 3em;
	margin-left: -26px;
	font-size: smaller;
	font-style: italic;
	}

.lang, .ilang
	{
	color: #0000ff;
	font: normal 7pt Arial, Helvetica, sans-serif;
	}

div.langMenu
	{
	position: absolute;
	z-index: 1;
	width: 96pt;
	padding: 8pt;
	visibility: hidden;
	border: 1px solid #000000;
	background: #ffffd0;
	}

div.langMenu ul
	{
	padding-left: 2em;
	margin-left: 0;
	}

div.filtered
	{
	margin: 4pt 0 8pt -26px;
	padding: 4px 4px 8px 26px;
	width: 100%;
	border: 2px solid #aaaacc;
	background: #ffffff;
	}

div.filtered2
	{
	margin: 4pt 0 8pt -26px;
	padding: 4px 4px 8px 26px;
	width: 100%;
	border: none;
	background: #ffffff;
	}

div.filtered h1, div.filtered h2, div.filtered h3, div.filtered h4
	{
	margin-left: -22px;
	}

div.filtered span.lang
	{
	position: relative;
	left: -22px;
	}

div.reftip
	{
	position: absolute;
	z-index: 1;
	padding: 8pt;
	visibility: hidden;
	border: 1px solid #000000;
	background: #ffffd0;
	}

a.synParam
	{
	color: #0000FF;
	/*color: #3F7800;*/ 	
	/*color: #8DC54F;*/
	text-decoration: none;
    font-weight: normal;
	}

a.synParam:hover
	{
	text-decoration: underline;
    font-weight: normal;
	}

div.sapop
	{
	position: absolute;
	z-index: 1;
	left: 26px;
	width: 100%;
	padding: 10px 10px 10px 36px;
	visibility: hidden;
	border: 1px solid #000000;
	background: #ffffd0;
	}

div.footer
	{
	width: 100%;
	border: none;
	background: #ffffff;
	margin-top: 18pt;
	padding-bottom: 12pt;
	color: #0000FF;
	/*color: #228B22; */
	text-align: center;
	font-size: 76%;
	}

div.preliminary
	{
	margin-top: 8pt;
	padding-bottom: 12pt;
	color: #A0A0A0;
	}

/* A procedure section. eg. 'To create a file', 'To add a value' */
div.proc
    {
	margin-left: 0.5em; 
    }
     
/* The title of a 'procedure' section. */
div.proc h3
    {
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-weight: bold;
	font-size: 115%;
	margin-top: 1em;
	margin-bottom: 0.4em;
	margin-left: -0.5em; 
	color: #003399;
    }

div.proc ul
    {
    margin-left: 1.5em;
    }

div.proc ol
    {
    margin-left: 2.0em;
    }
      
.note
	{
	margin-left: 14pt;
	margin-right: 12pt;
	}

.indent1
	{
	margin-left: 12pt;
	}

.indent2
	{
	margin-left: 24pt;
	}

.indent3
	{
	margin-left: 36pt;
	}

p.proch
	{
	padding-left: 16px;
	}

p.proch img
	{
	position: relative; 
	vertical-align: top;
	left: -18px; 
	margin-right: -14px; 
	margin-bottom: -18px;
	}
	
div.clsPlatSpec
{
	background-color:#FFF8DC;
	border-style:solid;
	border-width:1pt 0pt 0pt 1pt;
	border-color:#ffE4C4;
	margin-top:0.6em;
	width:100%;
}


/* Applies to the language labels in the Language Filter drop-down list. */
.languageFilter
{
	color:	#0000FF;
	cursor:hand;
	text-decoration:underline;
	padding-bottom:4;
}

/* Dropdown areas */

#languageSpan {
	position: absolute;
	visibility: hidden;
	border-style: solid;
	border-width: 1px;
	border-color: #C8CDDE;
	background: #d4dfff;
	padding: 4px;
	font-size: 70%;
}

#membersOptionsSpan {
	position: absolute;
	visibility: hidden;
	border-style: solid;
	border-width: 1px;
	border-color: #C8CDDE;
	background: #d4dfff;
	padding: 4px;
	font-size: 70%;
}
--></style>

<xml>
<MSHelp:TOCTitle Title="Authoring Particle Systems Using XML and the Content Pipeline" />
<MSHelp:RLTitle Title="Authoring Particle Systems Using XML and the Content Pipeline" />
<MSHelp:Keyword Index="A" Term="O:Microsoft.Xna.XmlParticles" />
<MSHelp:Keyword Index="A" Term="d2906078-b9b9-d492-e407-001884cc1d76" />
<MSHelp:Keyword Index="K" Term="Authoring Particle Systems Using XML and the Content Pipeline" />

<MSHelp:Attr Name="AssetID" Value="d2906078-b9b9-d492-e407-001884cc1d76" />
<MSHelp:Attr Name="Locale" Value="en-us" />
<MSHelp:Attr Name="CommunityContent" Value="1" />
<MSHelp:Attr Name="TopicType" Value="kbOrient" />
</xml>
</head><body><div id="mainSection"><div id="mainBody">
  <h1>Authoring Particle Systems Using XML and the Content Pipeline</h1>
  <p>
    
      This tutorial teaches you how to extend the Particle 3D Sample so the particle systems are defined using XML files loaded with the Content Pipeline.
    
    It contains the following sections:
  </p>
  <ul><li><a href="#ID2EP">Introduction</a></li><li><a href="#ID2ELB">Getting Started</a></li><li><a href="#ID2EZC">Updating the Game Code</a></li><li><a href="#ID2E5G">Creating a Settings Assembly</a></li><li><a href="#ID2EVBAC">Creating XML Settings Files</a></li><li><a href="#ID2E2BAE">Final Result</a></li></ul>

  <a id="ID2EP" name="ID2EP"> </a><h1 class="heading">Introduction</h1><div id="ID2EP" class="hxnx1">
    
    <p>
      In the original version of the Particle 3D Sample, we defined each particle system by creating a separate class that derived from the abstract <code>ParticleSystem</code> base class. Each new class overloaded the <code>InitializeSettings</code> method to specify how to display the particle system. This meant you had to create a new class each time you wanted to add a new type of particle. Furthermore, you had to recompile your game each time you modified one of these classes to alter the particle behavior. This tutorial shows you how to make that process more efficient. Using external XML files enables you to create and tweak any number of different particle systems without changing the main game executable.
    </p>
    <p>
      The easiest approach would be to use the .NET <b>XmlSerializer</b> to load the <code>ParticleSettings</code> data from an XML file. However, you are going to use the Content Pipeline instead. This offers several advantages:
    </p>
    <ol>
      <li>
        XML files are bulky and can be slow to load. The Content Pipeline enables you to compile your XML data into a compact binary XNB file as part of the content build process.
      </li>
      <li>Building the XML settings into a binary format makes it harder for anyone to modify your data.</li>
      <li>
        Using the Content Pipeline enables you to move a lot of setup code out of the main game and into a custom content processor. Doing this work ahead of time during the content build process keeps the game nice and simple. It also ensures good load times.
      </li>
    </ol>
  </div>

  <a id="ID2ELB" name="ID2ELB"> </a><h1 class="heading">Getting Started</h1><div id="ID2ELB" class="hxnx1">
    
    <p>
      You are going to use the Windows version of the Particle 3D Sample as a starting point. Begin by downloading version 4.0 of the sample, and then make a copy of the sample that you can edit.
    </p>
    <p>The flow of data through the Content Pipeline goes like this:</p>
    <ol>
      <li>
        <p>During the content build process:</p>
        <ol>
          <li>The <code>ContentImporter</code> reads data from external files.</li>
          <li>The <code>ContentProcessor</code> processes the data.</li>
          <li>The data is serialized into a binary XNB file.</li>
        </ol>
      </li>
      <li>Inside the game itself, the <code>ContentManager.Load</code> method deserializes data from the XNB file.</li>
    </ol>
    <p>
      You do not need to write your own <code>ContentImporter</code>. XNA Game Studio comes 
      with a built-in <b>XmlImporter</b> that will work well for you. Also, for this 
      purpose you need not bother with a <code>ContentProcessor</code> because you do not 
      need to do any special processing on your data. For now, you are going to concentrate 
      on the basic flow of moving data from XML files into your game.
    </p>
  </div>

  <a id="ID2EZC" name="ID2EZC"> </a><h1 class="heading">Updating the Game Code</h1><div id="ID2EZC" class="hxnx1">
    
    <p>You need to make some changes inside ParticleSystem.cs.</p>
    <ol>
      <li>
        Remove the <b>abstract</b> keyword from the declaration of the <code>ParticleSystem</code> 
        class. You are going to be loading XML settings data directly into the base <code>ParticleSystem</code> 
        class, rather than deriving specialized particle system classes from it, so this should no longer be abstract.
      </li>
      <li>
        <p>
          Inside the <code>Fields</code> region near the top of the <code>ParticleSystem</code> class, 
          add a new field to store the name of the XML settings file.
        </p>
        <div class="code"><span codeLanguage="CSharp"><table><tr><th>C# </th></tr><tr><td><pre><pre>// Name of the XML settings file describing this particle system.
string settingsName;</pre></pre></td></tr></table></span></div>
        <p>At line 32, change this existing field declaration:</p>
        <div class="code"><span codeLanguage="CSharp"><table><tr><th>C# </th></tr><tr><td><pre><pre>ParticleSettings settings = new ParticleSettings();</pre></pre></td></tr></table></span></div>
        <p>to:</p>
        <div class="code"><span codeLanguage="CSharp"><table><tr><th>C# </th></tr><tr><td><pre><pre>ParticleSettings settings;</pre></pre></td></tr></table></span></div>
        <p>
           Since you are going to be loading settings using the <code>ContentManager</code>, 
           you no longer need to create a blank settings descriptor here.
        </p>
      </li>
      <li>
        <p>
          Find the <code>ParticleSystem</code> constructor at line 162, and change it to store the settings name.
        </p>
        <div class="code"><span codeLanguage="CSharp"><table><tr><th>C# </th></tr><tr><td><pre><pre>/// &lt;summary&gt;
/// Constructor.
/// &lt;/summary&gt;
public ParticleSystem(Game game, ContentManager content, string settingsName)
: base(game)
{
  this.content = content;
  this.settingsName = settingsName;
}       </pre></pre></td></tr></table></span></div>
      </li>
      <li>Delete the <code>Initialize</code> and <code>InitializeSettings</code> methods. You will not need them any more.</li>
      <li>    
        <p>
          In the <code>LoadContent</code> method (line 173), insert these new lines, which are 
          highlighted in bold. The first line loads your settings data via the <code>ContentManager</code>. 
          The others initialize the particles array.
        </p>
        <div class="code"><span codeLanguage="CSharp"><table><tr><th>C# </th></tr><tr><td><pre><pre>/// &lt;summary&gt;
/// Loads graphics for the particle system.
/// &lt;/summary&gt;
protected override void LoadContent()
{
    <b>settings = content.Load&lt;ParticleSettings&gt;(settingsName);

    // Allocate the particle array, and fill in the corner fields (which never change).
    particles = new ParticleVertex[settings.MaxParticles * 4];

    for (int i = 0; i &lt; settings.MaxParticles; i++)
    {
        particles[i * 4 + 0].Corner = new Short2(-1, -1);
        particles[i * 4 + 1].Corner = new Short2(1, -1);
        particles[i * 4 + 2].Corner = new Short2(1, 1);
        particles[i * 4 + 3].Corner = new Short2(-1, 1);
    }</b>

    LoadParticleEffect();
    ...</pre></pre></td></tr></table></span></div>
      </li>
      <li>    
        <p>
          Now, for something fun. In <b>Solution Explorer</b>, delete the ParticleSystems folder along with all the old hard-coded particle system classes inside it. You no longer need these!
        </p>
        <p>Open Game.cs, go to line 94, and replace this section, which created several different hard-coded classes:</p>
        <div class="code"><span codeLanguage="CSharp"><table><tr><th>C# </th></tr><tr><td><pre><pre>// Construct our particle system components.
explosionParticles = new ExplosionParticleSystem(this, Content);
explosionSmokeParticles = new ExplosionSmokeParticleSystem(this, Content);
projectileTrailParticles = new ProjectileTrailParticleSystem(this, Content);
smokePlumeParticles = new SmokePlumeParticleSystem(this, Content);
fireParticles = new FireParticleSystem(this, Content);</pre></pre></td></tr></table></span></div>
        <p>
          with this new version that creates multiple instances of our new data driven <code>ParticleSystem</code> class, specifying a different settings file for each one:
        </p>
        <div class="code"><span codeLanguage="CSharp"><table><tr><th>C# </th></tr><tr><td><pre><pre>// Construct our particle system components.
explosionParticles = new ParticleSystem(this, Content, "ExplosionSettings");
explosionSmokeParticles = new ParticleSystem(this, Content, "ExplosionSmokeSettings");
projectileTrailParticles = new ParticleSystem(this, Content, "ProjectileTrailSettings");
smokePlumeParticles = new ParticleSystem(this, Content, "SmokePlumeSettings");
fireParticles = new ParticleSystem(this, Content, "FireSettings");</pre></pre></td></tr></table></span></div>
        <p>And that is it! We're done.</p>
      </li>
    </ol>
    <p>
      At least we are done changing our game code. Of course, it won't actually run yet. If we press F5 to launch it, we will get a <b>ContentLoadException</b> with the message <code>Error loading "ExplosionSettings." File not found</code>. This is because we haven't actually created any settings data for the game to load yet.
    </p>

  </div>
  <a id="ID2E5G" name="ID2E5G"> </a><h1 class="heading">Creating a Settings Assembly</h1><div id="ID2E5G" class="hxnx1">
    

    <p>
      To build particle system settings data using the Content Pipeline, you must move the <b>ParticleSettings</b> class into a second assembly. You cannot leave this directly inside the main game project for several reasons.
    </p>

    <ol>
      <li>The Content Pipeline code runs as part of the build process. It does not run inside the game itself. To be able to build settings data, the definition of the settings class must be available while this data is being built. At the time when the data is built, the game itself has not been built yet! So if the settings data was defined inside the game, there would be an impossible circular dependency.</li>

      <li>Because the Content Pipeline code runs as part of the build, you must always run it on Windows, even if the game itself is for Xbox. This means that when you are building an Xbox game, there must be two versions of the settings class: a Windows version for use during the Content Pipeline data build, and an Xbox version that can be used at run time by the game itself.</li>
    </ol>

    <p>Putting the settings class into a separate assembly from the game is an elegant way to satisfy both these requirements.</p>
    <div class="proc"><h3 class="subHeading">To add a second project</h3><div class="subSection">
      
      <ol>
        <li>In <b>Solution Explorer</b>, right-click the <b>Solution</b> node, click <b>Add</b>, click <b>New project</b>, and then select the <b>Windows Game Library</b> template.</li>
        <li>Enter <b>ParticleSettings</b> as the name of your new project.</li>
        <li>Delete the Class1.cs file that the project template gives you by default. You will not need it.</li>
        <li>Move your <code>ParticleSettings</code> class from the original game project to this new assembly. Drag and drop the ParticleSettings.cs file from one project to the other inside the Solution Explorer pane, and then delete the original version.
        </li>
        <li>
          <p>
            Because we need to use the <b>ParticleSettings</b> class both when building content and at run time, you must 
            reference the new project twice: once from the main game project, then again from your Content project.
          </p>
          <ol>
            <li>
              Under <b>Particle3DSampleWindows</b>, right-click the <b>References</b> node, and click <b>Add Reference</b>.
            </li>
            <li>
              Next, click the <b>Projects</b> tab, and then select the <b>ParticleSettings</b> project.
            </li>
            <li>
              Repeat these actions, adding to the <b>References</b> node in the <b>Particle3DSampleContent</b> project.
            </li>
          </ol>
        </li>
      </ol>
    </div></div>
  </div>

  <a id="ID2EVBAC" name="ID2EVBAC"> </a><h1 class="heading">Creating XML Settings Files</h1><div id="ID2EVBAC" class="hxnx1">
    

    <p>Here we run into a small problem. Most of the data stored in the <b>ParticleSettings</b> class can be automatically serialized by the Content Pipeline, but it has one field of type <b>BlendState</b>, which is a complex GPU type that cannot be automatically serialized. To work around this, we will use Content Pipeline control attributes to tell the pipeline not to bother serializing this field, and instead use a helper property that will convert the blend state setting into a simple string that the serializer will be able to store for us.</p>

    <p>To do this, open ParticleSettings.xml, and then add the <b>Microsoft.Xna.Framework.Content</b> namespace to the using statements near the top of the file. At the end of the class, replace this code:</p>

    <div class="code"><span codeLanguage="CSharp"><table><tr><th>C# </th></tr><tr><td><pre><pre>// Alpha blending settings.
public BlendState BlendState = BlendState.NonPremultiplied;</pre></pre></td></tr></table></span></div>

<p>with this code:</p>

    <div class="code"><span codeLanguage="CSharp"><table><tr><th>C# </th></tr><tr><td><pre><pre>// Alpha blending settings.
[ContentSerializerIgnore]
public BlendState BlendState = BlendState.NonPremultiplied;


[ContentSerializer(ElementName = "BlendState")]
private string BlendStateSerializationHelper
{
    get { return BlendState.Name.Replace("BlendState.", string.Empty); }

    set
    {
        switch (value)
        {
            case "AlphaBlend":       BlendState = BlendState.AlphaBlend;       break;
            case "Additive":         BlendState = BlendState.Additive;         break;
            case "NonPremultiplied": BlendState = BlendState.NonPremultiplied; break;

            default:
                throw new ArgumentException("Unknown blend state " + value);
        }
    }
}</pre></pre></td></tr></table></span></div>

    <p>These control attributes tell the serializer to skip the <b>BlendState</b> field, and instead to use our private <b>BlendStateSerializationHelper</b> property, which converts the name of the blend state to and from an easily serialized string representation.</p>

    <p>
      Nearly there! For your final step, you must create some actual XML files that contain particle settings data. You are going to import these XML files into our <code>ParticleSettings</code> class. You need to ensure they match exactly the layout of that class in order for the deserialization to work. How do we know what this XML should look like? One way is to guess. A much more reliable approach, however, is to write a little test program that constructs an object of the type of which you are interested. After that, you can serialize the object out into the XML format. You can look at the resultant XML file to see how you should format the data.
    </p>
    <p>To test the XML serializer, add a TempMain.cs file to the <b>ParticleSettings</b> project, and then insert this code:</p>
    <div class="code"><span codeLanguage="CSharp"><table><tr><th>C# </th></tr><tr><td><pre><pre>using System.Xml;
using Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate;

namespace Particle3DSample
{
  public static class TempMain
  {
    public static void Main()
    {
      object testValue = new ParticleSettings();

      XmlWriterSettings settings = new XmlWriterSettings();
      settings.Indent = true;

      using (XmlWriter xmlWriter = XmlWriter.Create("test.xml", settings))
      {
        IntermediateSerializer.Serialize(xmlWriter, testValue, null);
      }
    }
  }
}   </pre></pre></td></tr></table></span></div>
    <p>
      In order to run this program, you must temporarily change the <b>ParticleSettings</b>
      project from a DLL to an executable, and add a reference to the Content Pipeline assembly.
    </p>
    <div class="proc"><h3 class="subHeading">To change the ParticleSettings project from a DLL to an executable</h3><div class="subSection">
      
      <ol>
        <li>In <b>Solution Explorer</b>, right-click the <b>ParticleSettings</b> project, and then click <b>Properties</b>.</li>
        <li>In the <b>Application</b> tab, change the <b>Output type</b> from <b>Class Library</b> to <b>Console Application</b>,
            and then change the <b>Target profile</b> setting from <b>.NET Framework 4 Client Profile</b> to <b>.NET Framework 4</b>.</li>
        <li>Right-click the <b>References</b> node under <b>ParticleSettings</b>, and then click <b>Add Reference</b>.</li>
        <li>On the <b>.NET</b> tab, select <b>Microsoft.Xna.Framework.Content.Pipeline</b>.</li>
        <li>
          <p>Right-click the <b>ParticleSettings</b> project, click <b>Debug</b>, and then click <b>Start new instance</b>.</p>
          <p>A console window appears briefly.</p>
        </li>
      </ol>
    </div></div>
    <p>Look in your ParticleSettings\bin\x86\Debug directory. You will see that it created this test.xml file.</p>
    <pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;XnaContent&gt;
  &lt;Asset Type="Particle3DSample.ParticleSettings"&gt;
    &lt;BlendState&gt;NonPremultiplied&lt;/BlendState&gt;
    &lt;TextureName Null="true" /&gt;
    &lt;MaxParticles&gt;100&lt;/MaxParticles&gt;
    &lt;Duration&gt;PT1S&lt;/Duration&gt;
    &lt;DurationRandomness&gt;0&lt;/DurationRandomness&gt;
    &lt;EmitterVelocitySensitivity&gt;1&lt;/EmitterVelocitySensitivity&gt;
    &lt;MinHorizontalVelocity&gt;0&lt;/MinHorizontalVelocity&gt;
    &lt;MaxHorizontalVelocity&gt;0&lt;/MaxHorizontalVelocity&gt;
    &lt;MinVerticalVelocity&gt;0&lt;/MinVerticalVelocity&gt;
    &lt;MaxVerticalVelocity&gt;0&lt;/MaxVerticalVelocity&gt;
    &lt;Gravity&gt;0 0 0&lt;/Gravity&gt;
    &lt;EndVelocity&gt;1&lt;/EndVelocity&gt;
    &lt;MinColor&gt;FFFFFFFF&lt;/MinColor&gt;
    &lt;MaxColor&gt;FFFFFFFF&lt;/MaxColor&gt;
    &lt;MinRotateSpeed&gt;0&lt;/MinRotateSpeed&gt;
    &lt;MaxRotateSpeed&gt;0&lt;/MaxRotateSpeed&gt;
    &lt;MinStartSize&gt;100&lt;/MinStartSize&gt;
    &lt;MaxStartSize&gt;100&lt;/MaxStartSize&gt;
    &lt;MinEndSize&gt;100&lt;/MinEndSize&gt;
    &lt;MaxEndSize&gt;100&lt;/MaxEndSize&gt;
  &lt;/Asset&gt;
&lt;/XnaContent&gt;    </pre>
    <p>
      So <i>this is</i> what your XML should look like. Now, undo your temporary changes to the <b>ParticleSettings</b> project:
    </p> 
      <ul>
        <li>Change the <b>Output type</b> from <b>Console Application</b> to <b>Class Library</b>.</li>
        <li>Change <b>Target profile</b> from <b>.NET Framework 4</b> to <b>.NET Framework 4 Client Profile</b>.</li>
        <li>Delete the TempMain.cs file.</li>
        <li>Remove the Microsoft.Xna.Framework.Content.Pipeline reference.</li>
        <li>Press F6 just to make sure everything still builds correctly.</li>
      </ul>
    <p>
      Obviously, a particle system with just those default settings will not be very interesting. We can make an ExplosionSettings.xml file by copying across the hard-coded settings from the original Particle 3D Sample.
    </p>
    <pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;XnaContent&gt;
  &lt;Asset Type="Particle3DSample.ParticleSettings"&gt;
    &lt;BlendState&gt;Additive&lt;/BlendState&gt;
    &lt;TextureName&gt;explosion&lt;/TextureName&gt;
    &lt;MaxParticles&gt;100&lt;/MaxParticles&gt;
    &lt;Duration&gt;PT2S&lt;/Duration&gt;
    &lt;DurationRandomness&gt;1&lt;/DurationRandomness&gt;
    &lt;EmitterVelocitySensitivity&gt;1&lt;/EmitterVelocitySensitivity&gt;
    &lt;MinHorizontalVelocity&gt;20&lt;/MinHorizontalVelocity&gt;
    &lt;MaxHorizontalVelocity&gt;30&lt;/MaxHorizontalVelocity&gt;
    &lt;MinVerticalVelocity&gt;-20&lt;/MinVerticalVelocity&gt;
    &lt;MaxVerticalVelocity&gt;20&lt;/MaxVerticalVelocity&gt;
    &lt;Gravity&gt;0 0 0&lt;/Gravity&gt;
    &lt;EndVelocity&gt;0&lt;/EndVelocity&gt;
    &lt;MinColor&gt;FF808080&lt;/MinColor&gt;
    &lt;MaxColor&gt;FFA9A9A9&lt;/MaxColor&gt;
    &lt;MinRotateSpeed&gt;-1&lt;/MinRotateSpeed&gt;
    &lt;MaxRotateSpeed&gt;1&lt;/MaxRotateSpeed&gt;
    &lt;MinStartSize&gt;10&lt;/MinStartSize&gt;
    &lt;MaxStartSize&gt;10&lt;/MaxStartSize&gt;
    &lt;MinEndSize&gt;100&lt;/MinEndSize&gt;
    &lt;MaxEndSize&gt;200&lt;/MaxEndSize&gt;
  &lt;/Asset&gt;
&lt;/XnaContent&gt;    </pre>
    <p>
      In addition to the ExplosionSettings.xml file, you need to create the new files ExplosionSmokeSettings.xml, FireSettings.xml, ProjectileTrailSettings.xml, and SmokePlumeSettings.xml. Repeat this process of copying and pasting the parameter values from the original sample. Add these five files to the <b>Particle3DSampleContent</b> project.
    </p>
  </div>
  
  <a id="ID2E2BAE" name="ID2E2BAE"> </a><h1 class="heading">Final Result</h1><div id="ID2E2BAE" class="hxnx1">
    
    <p>Press F5 to run the game.</p>
    <p>If you followed the previous steps correctly, the results will look the same as the original Particle 3D Sample. One difference is you can now edit your particle systems by modifying the XML files. If you look in the Particle3DSample\bin\x86\Debug\Content directory, you will notice the directory does not contain any XML files. The Content Pipeline was used to compile the settings data into the XNB format.</p>
    <p>See the XmlParticles directory for the complete code that you should have ended up with after following this tutorial.</p>
  </div>

</div><div class="footer" id="footer"><p>© 2010 Microsoft Corporation. All rights reserved.<br />Send feedback to <a href="mailto:xnags@microsoft.com?subject=Documentation Feedback: Authoring Particle Systems Using XML and the Content Pipeline">xnags@microsoft.com</a>.</p></div></div></body></html>
#region File Description
//-----------------------------------------------------------------------------
// ITicTacToeService.cs
//
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#endregion

#region Using Statements


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.Runtime.Serialization;


#endregion

namespace TicTacToeServices
{
    /// <summary>
    /// This service supports the game logic of the Tic-Tac-Toe game.
    /// </summary>
    [ServiceContract]
    public interface ITicTacToeService
    {
        /// <summary>
        /// Register a user and adds the user to the notification list.
        /// </summary>
        /// <param name="SessionID">Session identifier generated by the client.</param>
        /// <param name="clientURI">The <see cref="Uri"/> supplied by the client. This Uri is used to send push 
        /// notifications to the client.
        [OperationContract]
        bool Register(Guid SessionID, Uri clientURI);

        /// <summary>
        /// Unregister a user and removes the user from the notification list.
        /// </summary>
        /// <param name="SessionID">The game user's session identifier.</param>
        [OperationContract]
        void Unregister(Guid SessionID);

        /// <summary>
        /// Performs a step in the game and notifies all associated clients using a push notification.
        /// </summary>
        /// <param name="SessionID">Identifier of the client who performed the move.</param>
        /// <param name="x">The X position of the move performed.</param>
        /// <param name="y">The Y position of the move performed.</param>
        /// <param name="playerLetter">Letter representing the player's move. Either "X" or "O".</param>
        [OperationContract]
        void GameStep(Guid SessionID, int x, int y, string playerLetter);

        /// <summary>
        /// Sends the entire game state to all associated clients using push notifications.
        /// </summary>
        /// <param name="SessionID">Identifier of a user participating in a game the state of which is to 
        /// be sent.</param>
        [OperationContract]
        void GetGameState(Guid SessionID);

        /// <summary>
        /// Restart a specific game.
        /// </summary>
        /// <param name="SessionID">Identifier of a user participating in the game to restart.</param>
        [OperationContract]
        void RestartGame(Guid SessionID);

    }


}

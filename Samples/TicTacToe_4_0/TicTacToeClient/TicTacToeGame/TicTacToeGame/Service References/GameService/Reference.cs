//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace TicTacToeGame.GameService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameService.ITicTacToeService")]
    public interface ITicTacToeService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITicTacToeService/Register", ReplyAction="http://tempuri.org/ITicTacToeService/RegisterResponse")]
        System.IAsyncResult BeginRegister(System.Guid SessionID, System.Uri clientURI, System.AsyncCallback callback, object asyncState);
        
        bool EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITicTacToeService/Unregister", ReplyAction="http://tempuri.org/ITicTacToeService/UnregisterResponse")]
        System.IAsyncResult BeginUnregister(System.Guid SessionID, System.AsyncCallback callback, object asyncState);
        
        void EndUnregister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITicTacToeService/GameStep", ReplyAction="http://tempuri.org/ITicTacToeService/GameStepResponse")]
        System.IAsyncResult BeginGameStep(System.Guid SessionID, int x, int y, string playerLetter, System.AsyncCallback callback, object asyncState);
        
        void EndGameStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITicTacToeService/GetGameState", ReplyAction="http://tempuri.org/ITicTacToeService/GetGameStateResponse")]
        System.IAsyncResult BeginGetGameState(System.Guid SessionID, System.AsyncCallback callback, object asyncState);
        
        void EndGetGameState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITicTacToeService/RestartGame", ReplyAction="http://tempuri.org/ITicTacToeService/RestartGameResponse")]
        System.IAsyncResult BeginRestartGame(System.Guid SessionID, System.AsyncCallback callback, object asyncState);
        
        void EndRestartGame(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITicTacToeServiceChannel : TicTacToeGame.GameService.ITicTacToeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TicTacToeServiceClient : System.ServiceModel.ClientBase<TicTacToeGame.GameService.ITicTacToeService>, TicTacToeGame.GameService.ITicTacToeService {
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnregisterDelegate;
        
        private EndOperationDelegate onEndUnregisterDelegate;
        
        private System.Threading.SendOrPostCallback onUnregisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginGameStepDelegate;
        
        private EndOperationDelegate onEndGameStepDelegate;
        
        private System.Threading.SendOrPostCallback onGameStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGameStateDelegate;
        
        private EndOperationDelegate onEndGetGameStateDelegate;
        
        private System.Threading.SendOrPostCallback onGetGameStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginRestartGameDelegate;
        
        private EndOperationDelegate onEndRestartGameDelegate;
        
        private System.Threading.SendOrPostCallback onRestartGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TicTacToeServiceClient() {
        }
        
        public TicTacToeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TicTacToeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicTacToeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicTacToeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<RegisterCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnregisterCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> GameStepCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> GetGameStateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RestartGameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TicTacToeGame.GameService.ITicTacToeService.BeginRegister(System.Guid SessionID, System.Uri clientURI, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(SessionID, clientURI, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TicTacToeGame.GameService.ITicTacToeService.EndRegister(System.IAsyncResult result) {
            return base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid SessionID = ((System.Guid)(inValues[0]));
            System.Uri clientURI = ((System.Uri)(inValues[1]));
            return ((TicTacToeGame.GameService.ITicTacToeService)(this)).BeginRegister(SessionID, clientURI, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            bool retVal = ((TicTacToeGame.GameService.ITicTacToeService)(this)).EndRegister(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(System.Guid SessionID, System.Uri clientURI) {
            this.RegisterAsync(SessionID, clientURI, null);
        }
        
        public void RegisterAsync(System.Guid SessionID, System.Uri clientURI, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        SessionID,
                        clientURI}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TicTacToeGame.GameService.ITicTacToeService.BeginUnregister(System.Guid SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnregister(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TicTacToeGame.GameService.ITicTacToeService.EndUnregister(System.IAsyncResult result) {
            base.Channel.EndUnregister(result);
        }
        
        private System.IAsyncResult OnBeginUnregister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid SessionID = ((System.Guid)(inValues[0]));
            return ((TicTacToeGame.GameService.ITicTacToeService)(this)).BeginUnregister(SessionID, callback, asyncState);
        }
        
        private object[] OnEndUnregister(System.IAsyncResult result) {
            ((TicTacToeGame.GameService.ITicTacToeService)(this)).EndUnregister(result);
            return null;
        }
        
        private void OnUnregisterCompleted(object state) {
            if ((this.UnregisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnregisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnregisterAsync(System.Guid SessionID) {
            this.UnregisterAsync(SessionID, null);
        }
        
        public void UnregisterAsync(System.Guid SessionID, object userState) {
            if ((this.onBeginUnregisterDelegate == null)) {
                this.onBeginUnregisterDelegate = new BeginOperationDelegate(this.OnBeginUnregister);
            }
            if ((this.onEndUnregisterDelegate == null)) {
                this.onEndUnregisterDelegate = new EndOperationDelegate(this.OnEndUnregister);
            }
            if ((this.onUnregisterCompletedDelegate == null)) {
                this.onUnregisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnregisterCompleted);
            }
            base.InvokeAsync(this.onBeginUnregisterDelegate, new object[] {
                        SessionID}, this.onEndUnregisterDelegate, this.onUnregisterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TicTacToeGame.GameService.ITicTacToeService.BeginGameStep(System.Guid SessionID, int x, int y, string playerLetter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGameStep(SessionID, x, y, playerLetter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TicTacToeGame.GameService.ITicTacToeService.EndGameStep(System.IAsyncResult result) {
            base.Channel.EndGameStep(result);
        }
        
        private System.IAsyncResult OnBeginGameStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid SessionID = ((System.Guid)(inValues[0]));
            int x = ((int)(inValues[1]));
            int y = ((int)(inValues[2]));
            string playerLetter = ((string)(inValues[3]));
            return ((TicTacToeGame.GameService.ITicTacToeService)(this)).BeginGameStep(SessionID, x, y, playerLetter, callback, asyncState);
        }
        
        private object[] OnEndGameStep(System.IAsyncResult result) {
            ((TicTacToeGame.GameService.ITicTacToeService)(this)).EndGameStep(result);
            return null;
        }
        
        private void OnGameStepCompleted(object state) {
            if ((this.GameStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GameStepCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GameStepAsync(System.Guid SessionID, int x, int y, string playerLetter) {
            this.GameStepAsync(SessionID, x, y, playerLetter, null);
        }
        
        public void GameStepAsync(System.Guid SessionID, int x, int y, string playerLetter, object userState) {
            if ((this.onBeginGameStepDelegate == null)) {
                this.onBeginGameStepDelegate = new BeginOperationDelegate(this.OnBeginGameStep);
            }
            if ((this.onEndGameStepDelegate == null)) {
                this.onEndGameStepDelegate = new EndOperationDelegate(this.OnEndGameStep);
            }
            if ((this.onGameStepCompletedDelegate == null)) {
                this.onGameStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGameStepCompleted);
            }
            base.InvokeAsync(this.onBeginGameStepDelegate, new object[] {
                        SessionID,
                        x,
                        y,
                        playerLetter}, this.onEndGameStepDelegate, this.onGameStepCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TicTacToeGame.GameService.ITicTacToeService.BeginGetGameState(System.Guid SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGameState(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TicTacToeGame.GameService.ITicTacToeService.EndGetGameState(System.IAsyncResult result) {
            base.Channel.EndGetGameState(result);
        }
        
        private System.IAsyncResult OnBeginGetGameState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid SessionID = ((System.Guid)(inValues[0]));
            return ((TicTacToeGame.GameService.ITicTacToeService)(this)).BeginGetGameState(SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetGameState(System.IAsyncResult result) {
            ((TicTacToeGame.GameService.ITicTacToeService)(this)).EndGetGameState(result);
            return null;
        }
        
        private void OnGetGameStateCompleted(object state) {
            if ((this.GetGameStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGameStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGameStateAsync(System.Guid SessionID) {
            this.GetGameStateAsync(SessionID, null);
        }
        
        public void GetGameStateAsync(System.Guid SessionID, object userState) {
            if ((this.onBeginGetGameStateDelegate == null)) {
                this.onBeginGetGameStateDelegate = new BeginOperationDelegate(this.OnBeginGetGameState);
            }
            if ((this.onEndGetGameStateDelegate == null)) {
                this.onEndGetGameStateDelegate = new EndOperationDelegate(this.OnEndGetGameState);
            }
            if ((this.onGetGameStateCompletedDelegate == null)) {
                this.onGetGameStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGameStateCompleted);
            }
            base.InvokeAsync(this.onBeginGetGameStateDelegate, new object[] {
                        SessionID}, this.onEndGetGameStateDelegate, this.onGetGameStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TicTacToeGame.GameService.ITicTacToeService.BeginRestartGame(System.Guid SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRestartGame(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TicTacToeGame.GameService.ITicTacToeService.EndRestartGame(System.IAsyncResult result) {
            base.Channel.EndRestartGame(result);
        }
        
        private System.IAsyncResult OnBeginRestartGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid SessionID = ((System.Guid)(inValues[0]));
            return ((TicTacToeGame.GameService.ITicTacToeService)(this)).BeginRestartGame(SessionID, callback, asyncState);
        }
        
        private object[] OnEndRestartGame(System.IAsyncResult result) {
            ((TicTacToeGame.GameService.ITicTacToeService)(this)).EndRestartGame(result);
            return null;
        }
        
        private void OnRestartGameCompleted(object state) {
            if ((this.RestartGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RestartGameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RestartGameAsync(System.Guid SessionID) {
            this.RestartGameAsync(SessionID, null);
        }
        
        public void RestartGameAsync(System.Guid SessionID, object userState) {
            if ((this.onBeginRestartGameDelegate == null)) {
                this.onBeginRestartGameDelegate = new BeginOperationDelegate(this.OnBeginRestartGame);
            }
            if ((this.onEndRestartGameDelegate == null)) {
                this.onEndRestartGameDelegate = new EndOperationDelegate(this.OnEndRestartGame);
            }
            if ((this.onRestartGameCompletedDelegate == null)) {
                this.onRestartGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRestartGameCompleted);
            }
            base.InvokeAsync(this.onBeginRestartGameDelegate, new object[] {
                        SessionID}, this.onEndRestartGameDelegate, this.onRestartGameCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TicTacToeGame.GameService.ITicTacToeService CreateChannel() {
            return new TicTacToeServiceClientChannel(this);
        }
        
        private class TicTacToeServiceClientChannel : ChannelBase<TicTacToeGame.GameService.ITicTacToeService>, TicTacToeGame.GameService.ITicTacToeService {
            
            public TicTacToeServiceClientChannel(System.ServiceModel.ClientBase<TicTacToeGame.GameService.ITicTacToeService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRegister(System.Guid SessionID, System.Uri clientURI, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = clientURI;
                System.IAsyncResult _result = base.BeginInvoke("Register", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRegister(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Register", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUnregister(System.Guid SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("Unregister", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUnregister(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Unregister", _args, result);
            }
            
            public System.IAsyncResult BeginGameStep(System.Guid SessionID, int x, int y, string playerLetter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SessionID;
                _args[1] = x;
                _args[2] = y;
                _args[3] = playerLetter;
                System.IAsyncResult _result = base.BeginInvoke("GameStep", _args, callback, asyncState);
                return _result;
            }
            
            public void EndGameStep(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("GameStep", _args, result);
            }
            
            public System.IAsyncResult BeginGetGameState(System.Guid SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetGameState", _args, callback, asyncState);
                return _result;
            }
            
            public void EndGetGameState(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("GetGameState", _args, result);
            }
            
            public System.IAsyncResult BeginRestartGame(System.Guid SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("RestartGame", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRestartGame(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RestartGame", _args, result);
            }
        }
    }
}

<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:xanx="http://schemas.microsoft.com/developer/xanx/2005"><head><META http-equiv="Content-Type" content="text/html; charset=utf-8"><META NAME="save" CONTENT="history"><title>Vector Rumble</title>
<style><!--
/***********************************************************
 *             SCRIPT-SUPPORTING STYLES
 ***********************************************************/

/* Defines the userData cache persistence mechanism. */
.userDataStyle
{
	behavior: url(#default#userData);
}

/* Used to save the scroll bar position when navigating away from a page. */
div.saveHistory
{
	behavior: url(#default#saveHistory);
}

/* Formats the expand/collapse images for all collapsible regions. */
img.toggle
{
	border: 0;
	margin-right: 5;
}

/* Formats the Language filter drop-down image. */
img#languageFilterImage
{
	border: 0;
	margin-left: 0;
	vertical-align: middle;
}

/* Formats the Members Options filter drop-down image. */
img#membersOptionsFilterImage
{
	border: 0;
	margin-left: 0;
	vertical-align: middle;
}

/* Formats the Collapse All/Expand All images. */
img#toggleAllImage
{
	margin-left: 0;
	vertical-align: middle;
}

/* Supports XLinks */
MSHelp\:link
{
 	text-decoration: underline;
	color: #0000ff; 
	hoverColor: #3366ff;
	filterString: ;
}


body
	{
	background:	#FFFFFF;
	color: #000000;
	font-family:	Verdana;
	font-size: medium;
	font-style: normal;
	font-weight: normal;
	margin-top:	0;
	margin-bottom:	0;
	margin-left:	0;
	margin-right:	0;
	width:	100%;
	/*font-size: 110%;*/
	}

div.section
	{
	margin-left: 15px;
	}

div.hxnx5
	{
	margin-left: 1.5em;
	}

/* Font for all headings */	
h1, h2, h3, h4, h5, h6
	{
	font-family: Verdana, Arial, Helvetica, sans-serif;
	margin-top: 18;
	margin-bottom: 8; 
	font-weight: bold;
	}
h1
	{
	font-size: 130%;
	color: #003399;
	}
div#scrollyes h1 /* Changes font size for full-scrolling topic */
	{
	font-size: 150%;
	}
h2
	{
	font-size: 125%;
	}
h3
	{
	font-size: 115%;
	margin-top: 9;
	margin-bottom: 4; 
	}
h4
	{
	font-size: 115%;
	margin-top: 9;
	margin-bottom: 4; 
	}
h5
	{
	font-size: 100%;
	margin-top: 9;
	margin-bottom: 4; 
	}
h6
	{
	font-size: 100%;
	margin-top: 9;
	margin-bottom: 4; 
	}

ul p, ol p, dl p
	{
	margin-left: 0em;
	}

p
	{
	margin-top: .6em;
	margin-bottom: .6em;
	}
	
td p
	{
	margin-top: 0.0em;
	margin-bottom: 0.6em;
	}

dd p
	{
	margin-top: 0.0em;
	margin-bottom: 0.6em;
	}

.image
	{
	text-align: center;
	}

dl
	{
	margin-top: 0em; 
	margin-bottom: 1.3em;
	}

dd
	{
	margin-bottom: 0em;
	margin-left: 0;
	}

dl.glossary dd 
{
	margin-bottom: 0em;  
	margin-left: 1.5em; 
}

dt
	{
	margin-top: .6em;
	margin-bottom: 1;
	}

ul, ol
	{
	margin-top: 0.6em;
	margin-bottom: 0.6em; 	
	}
	
ol
	{
	margin-left: 2.5em; 
	
	}	
	
ul
	{
	list-style-type: disc; 
	margin-left: 1.9em; 
	}

li
	{
	margin-bottom: 0.4em;
	}

ul ol, ol ol
	{
	list-style-type: lower-alpha;
	}

pre
	{
	margin-top: .6em;
	margin-bottom: .6em; 
	}

pre
	{
	font: 105% Lucida, mono; 
	color: #000066;
	}

code
{
	font-family: Monospace, Courier New, Courier;
	font-size: 105%;
	color:	#000066;
}

table.userdata td 
	{
	background: #ffffff;
	background-color: #F5F5F5;
	border-color: #ffffff;
	border: none;
	}	
table.clsWarning
	{
	background: #ffffff;
	padding: 0px;
	margin: 0px;
	border: none;
	}
table.clsWarning td
	{
	padding: 0px;
	margin: 0px;
	background: #ffffff;
	vertical-align: middle;
	font-size: 70%;
	}

div#mainSection table
	{
	width: 98%;
	background: #ffffff;
	margin-top: 5px;
	margin-bottom: 5px;
	}

div#mainSection table th
	{ 
	padding: 5px 6px;
	background: #EFEFF7;
	text-align: left;
	font-size: 70%;
	vertical-align: bottom;
	border-bottom: 1px solid #C8CDDE;
	}
div#mainSection table td
	{ 
	padding: 5px 5px;
	background: #F7F7FF;
	vertical-align: top;
	font-size: 70%;
	border-bottom: 1px solid #D5D5D3;
	}

div#syntaxCodeBlocks table th
	{
	padding: 1px 6px;
	color: #000066;
	}

div#syntaxCodeBlocks table td
	{
	padding: 1px 5px;
	}

/* Applies to the running header text in the first row of the upper table in the
   non-scrolling header region. */
span#runningHeaderText
{
	color: #003399;
	font-size: 90%;
	padding-left: 13;
}

/* Applies to the topic title in the second row of the upper table in the
   non-scrolling header region. */
span#nsrTitle
{
	color: #003399;
	font-size: 120%;
	font-weight: 600;
	padding-left: 13;
}

/* Applies to everything below the non-scrolling header region. */
div#mainSection
{
	font-size: 70%;
	width: 100%;
}

/* Applies to everything below the non-scrolling header region, minus the footer. */
div#mainBody
{
	font-size: 90%;
	margin-left: 15;
	margin-top: 10;
	padding-bottom: 20;
}

/* Adds right padding for all blocks in mainBody */
div#mainBody p, div#mainBody ol, div#mainBody ul, div#mainBody dl
{
	padding-right: 5;
}

div#mainBody div.alert, div#mainBody div.code, div#mainBody div.tableSection
{
	width:98.9%;
}

div.alert p, div.code p
{
	margin-top:5;
	margin-bottom:8;
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Begin Note Styles - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
div#mainSection div.alert table
{
	border: 0;
}

div#mainSection div.alert table th
{
	padding-top: 0;
	padding-bottom: 0;
	padding-left: 5;
	padding-right: 5;
}

div#mainSection div.alert table td
{
	padding-left: 5;
	padding-right: 5;
}

img.note
{
	border: 0;
	margin-left: 0;
	margin-right: 3;
}
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - End Note Styles - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Begin Non-scrolling Header Region Styles - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
/* Applies to the entire non-scrolling header region. */
div#header
{
	background-color: #D4DFFF;
	padding-top:	0;
	padding-bottom:	0;
	padding-left:	0;
	padding-right:	0;
	width:	100%;
}

/* Applies to both tables in the non-scrolling header region. */
div#header table
{
	margin-top:	0;
	margin-bottom: 0;
	border-bottom-color: #C8CDDE;
	border-bottom-style: solid;
	border-bottom-width: 1;
	background: #D4DFFF;
	width:	100%;
}

/* Applies to cells in both tables in the non-scrolling header region. */
div#header table td
{
	color: #0000FF;
	font-size: 70%;
	padding-right: 20;
	padding-top: 1;
	padding-bottom: 1;
	border: none;
	background: #D4DFFF;
}

/* Applies to the last row in the upper table of the non-scrolling header region. Text 
   in this row includes See Also, Constructors, Methods, and Properties. */
div#header table tr#headerTableRow3 td
{
	padding-bottom: 2;
	padding-top: 5;
	padding-left: 15;
}

/* Applies to the lower table in the non-scrolling header region. Text in this table
   includes Collapse All/Expand All, Language Filter, and Members Options. */
div#header table#bottomTable
{
	border-top-color: #FFFFFF;
	border-top-style: solid;
	border-top-width: 1;
	text-align: left;
	padding-left: 15;
}


blockquote
	{
	margin-left: 3.8em;
	margin-right: 3.8em;
	margin-top: .6em;
	margin-bottom: .6em;
	}

sup
	{
	text-decoration: none;
	font-size: smaller; 
	}

a:link
	{
	color: #0000FF;
/*    font-weight: bold */
	}
	
a:visited
	{
	color: #0000AA;
/*    font-weight: bold	*/
	}
	
a:hover
	{
	color: #3366FF;
/*    font-weight: bold */
	}
	
.label
	{
	font-weight: bold; 
	margin-top: 1em;
	margin-left: -26px;
	}
	
.tl
	{
	margin-bottom: .75em; 
	}
	
.atl
	{
	padding-left: 1.5em;
	padding-bottom: .75em; 
	}
	
.cfe
	{
	font-weight: bold; 
	}
	
.mini
	{
	font-size: smaller;
	}
	
.dt
	{
	margin-bottom: -.6em; 
	}
	
.indent
	{
	margin-left: 1.9em; 
	margin-right: 1.9em;
	}

.product
	{
	text-align: right;
	color: #333333;
	font-size: smaller;
	font-style: italic;
	}

.buttonbarshade
	{
	position: relative;
	margin: 0;
	left: 0px;
	top: 2;
	width: 50%;
	height: 40px;
	}

.buttonbartable
	{
	position: absolute;
	margin: 0;
	padding:0;
	border:0;
	left:0px;
	top: 2;
	width: 100%;
	height: 40px;
	}

/* background color, font for header */ 
table.buttonbartable td, table.buttonbarshade td
	{
	background: #ffffff; /*#5177B8; #80C615;*/
	border-left: 0px solid #80C615;
	margin: 0;
	padding: 0px 0px 0px 0px;
	font-family: Impact, sans-serif;
	font-size: 14pt;
	}

table.buttonbartable td.button1
	{
	background: #5177B8; /*#80C615;*/;
	padding: 0;
	font-weight: bold;
	text-align: center;
	cursor: hand;
	}

table.buttonbartable td.button2
	{
	background: #5177B8; /*#80C615;*/;
	font-weight: bold;
	text-align: center;
	}

table.buttonbartable td.button3
	{
	background: #5177B8; /*#80C615;*/;
	font-weight: bold;
	text-align: center;
	}

table.buttonbartable td.runninghead
	{
	padding-left: 0px;
	font-style: italic;
	text-align: left;
	}

.version
	{
	text-align: left;
	color: #000000;
	margin-top: 3em;
	margin-left: -26px;
	font-size: smaller;
	font-style: italic;
	}

.lang, .ilang
	{
	color: #0000ff;
	font: normal 7pt Arial, Helvetica, sans-serif;
	}

div.langMenu
	{
	position: absolute;
	z-index: 1;
	width: 96pt;
	padding: 8pt;
	visibility: hidden;
	border: 1px solid #000000;
	background: #ffffd0;
	}

div.langMenu ul
	{
	padding-left: 2em;
	margin-left: 0;
	}

div.filtered
	{
	margin: 4pt 0 8pt -26px;
	padding: 4px 4px 8px 26px;
	width: 100%;
	border: 2px solid #aaaacc;
	background: #ffffff;
	}

div.filtered2
	{
	margin: 4pt 0 8pt -26px;
	padding: 4px 4px 8px 26px;
	width: 100%;
	border: none;
	background: #ffffff;
	}

div.filtered h1, div.filtered h2, div.filtered h3, div.filtered h4
	{
	margin-left: -22px;
	}

div.filtered span.lang
	{
	position: relative;
	left: -22px;
	}

div.reftip
	{
	position: absolute;
	z-index: 1;
	padding: 8pt;
	visibility: hidden;
	border: 1px solid #000000;
	background: #ffffd0;
	}

a.synParam
	{
	color: #0000FF;
	/*color: #3F7800;*/ 	
	/*color: #8DC54F;*/
	text-decoration: none;
    font-weight: normal;
	}

a.synParam:hover
	{
	text-decoration: underline;
    font-weight: normal;
	}

div.sapop
	{
	position: absolute;
	z-index: 1;
	left: 26px;
	width: 100%;
	padding: 10px 10px 10px 36px;
	visibility: hidden;
	border: 1px solid #000000;
	background: #ffffd0;
	}

div.footer
	{
	width: 100%;
	border: none;
	background: #ffffff;
	margin-top: 18pt;
	padding-bottom: 12pt;
	color: #0000FF;
	/*color: #228B22; */
	text-align: center;
	font-size: 76%;
	}

div.preliminary
	{
	margin-top: 8pt;
	padding-bottom: 12pt;
	color: #A0A0A0;
	}

/* A procedure section. eg. 'To create a file', 'To add a value' */
div.proc
    {
	margin-left: 0.5em; 
    }
     
/* The title of a 'procedure' section. */
div.proc h3
    {
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-weight: bold;
	font-size: 115%;
	margin-top: 1em;
	margin-bottom: 0.4em;
	margin-left: -0.5em; 
	color: #003399;
    }

div.proc ul
    {
    margin-left: 1.5em;
    }

div.proc ol
    {
    margin-left: 2.0em;
    }
      
.note
	{
	margin-left: 14pt;
	margin-right: 12pt;
	}

.indent1
	{
	margin-left: 12pt;
	}

.indent2
	{
	margin-left: 24pt;
	}

.indent3
	{
	margin-left: 36pt;
	}

p.proch
	{
	padding-left: 16px;
	}

p.proch img
	{
	position: relative; 
	vertical-align: top;
	left: -18px; 
	margin-right: -14px; 
	margin-bottom: -18px;
	}
	
div.clsPlatSpec
{
	background-color:#FFF8DC;
	border-style:solid;
	border-width:1pt 0pt 0pt 1pt;
	border-color:#ffE4C4;
	margin-top:0.6em;
	width:100%;
}


/* Applies to the language labels in the Language Filter drop-down list. */
.languageFilter
{
	color:	#0000FF;
	cursor:hand;
	text-decoration:underline;
	padding-bottom:4;
}

/* Dropdown areas */

#languageSpan {
	position: absolute;
	visibility: hidden;
	border-style: solid;
	border-width: 1px;
	border-color: #C8CDDE;
	background: #d4dfff;
	padding: 4px;
	font-size: 70%;
}

#membersOptionsSpan {
	position: absolute;
	visibility: hidden;
	border-style: solid;
	border-width: 1px;
	border-color: #C8CDDE;
	background: #d4dfff;
	padding: 4px;
	font-size: 70%;
}
--></style>

<xml>
<MSHelp:TOCTitle Title="Vector Rumble" />
<MSHelp:RLTitle Title="Vector Rumble" />
<MSHelp:Keyword Index="A" Term="O:Microsoft.Xna.VectorRumble" />
<MSHelp:Keyword Index="A" Term="6cb2f3ee-544c-c876-1326-501eb0800056" />
<MSHelp:Keyword Index="K" Term="Vector Rumble" />
<MSHelp:Attr Name="ProjType" Value="LocalProj" />
<MSHelp:Attr Name="ProjType" Value="XNA" />
<MSHelp:Attr Name="DocSet" Value="XNA" />
<MSHelp:Attr Name="DocSet" Value="ExpressLibVS" />
<MSHelp:Attr Name="DocSet" Value="C#" />
<MSHelp:Attr Name="Locale" Value="en-us" />
<MSHelp:Attr Name="AssetID" Value="6cb2f3ee-544c-c876-1326-501eb0800056" />
<MSHelp:Attr Name="TopicType" Value="kbOrient" />
</xml>
</head><body><div id="mainSection"><div id="mainBody">
	<h1>Vector Rumble</h1>
	

	<p>This topic contains the following sections.</p>
	<ul><li><a href="#ID2EP">Introduction to Vector Rumble</a></li><li><a href="#ID2E4">System Requirements</a></li><li><a href="#ID2EQB">Getting Started</a></li><li><a href="#ID2ECD">Game Controls</a></li><li><a href="#ID2E3G">Implementation Notes</a></li><li><a href="#ID2E6BAC">Extending Vector Rumble</a></li></ul>

	<a name="ID2EP"></a><h1 class="heading">Introduction to Vector Rumble</h1><div id="ID2EP" class="hxnx1">
		

		<p>
			Vector Rumble is a complete XNA Game Studio Express mini game. The project comes ready to compile and run, and it's easy to customize with a little bit of C# programming. You are free to use the source code as the basis for your own XNA Game Studio Express game projects, and to share your work with others.
		</p>

		<p>
			Vector Rumble is a two-dimensional shooter, pitting up to four players against one another in an arena filled with asteroids and power-ups.
		</p>

	</div>


  <a name="ID2E4"></a><h1 class="heading">System Requirements</h1><div id="ID2E4" class="hxnx1">
    
  <a name="ID2EBB"></a><h2 class="subHeading">Minimum Shader Profile</h2><div id="ID2EBB" class="hxnx2">
    
    <dl class="glossary">
      <dt>Vertex Shader Model 1.1</dt>
      <dt>Pixel Shader Model 2.0</dt>
    </dl>
  </div>
    <p>In addition, the Windows version of this mini game requires a minimum desktop resolution of 1280 by 720 pixels.</p>
  </div>

  <a name="ID2EQB"></a><h1 class="heading">Getting Started</h1><div id="ID2EQB" class="hxnx1">
		

		<a name="ID2EUB"></a><h2 class="subHeading">Building and Running a Vector Rumble Project</h2><div id="ID2EUB" class="hxnx2">
			
			<div class="proc"><h3 class="subHeading">To build and run the Vector Rumble project</h3><div class="subSection">
				
				<ol>
					<li>
						<p>
							Press F5, or, on the <b>Debug</b> menu, click <b>Start Debugging</b>.
						</p>
						<p>The project will build and then run within the debugger.</p>
					</li>
				</ol>
			</div></div>

			<div class="proc"><h3 class="subHeading">To build the project without running it</h3><div class="subSection">
				
				<ol>
					<li>
						<p>
							Press F6, or, on the <b>Build</b> menu, click <b>Build Solution</b>.
						</p>
						<p>The project will build without running.</p>
					</li>
				</ol>
			</div></div>
		</div>

	</div>

	<a name="ID2ECD"></a><h1 class="heading">Game Controls</h1><div id="ID2ECD" class="hxnx1">
		
		<p>Vector Rumble uses the following keyboard and gamepad controls.  You may use up to four gamepads, each controlling its own ship.</p>
		<table>
			<tr>
				<th>Action</th>
				<th>Keyboard Control</th>
				<th>Gamepad Control</th>
			</tr>
      <tr>
        <td>Select a menu entry.</td>
        <td>UP ARROW, DOWN ARROW</td>
        <td>Left thumb stick, D-Pad up and down</td>
      </tr>
      <tr>
        <td>Accept the menu selection.</td>
        <td>SPACEBAR, ENTER</td>
        <td>
          <b>A</b>, <b>START</b>
        </td>
      </tr>
      <tr>
        <td>Cancel the menu.</td>
        <td>ESC</td>
        <td>
          <b>B</b>, <b>BACK</b>
        </td>
      </tr>
      <tr>
        <td>Join the game.</td>
        <td>None (gamepad required)</td>
        <td>
          Hold <b>A</b> for several seconds.
        </td>
      </tr>
      <tr>
				<td>Move the ship.</td>
				<td>None (gamepad required)</td>
				<td>Left thumb stick</td>
			</tr>
			<tr>
				<td>Fire the current weapon.</td>
				<td>None (gamepad required)</td>
				<td>Right thumb stick</td>
			</tr>
			<tr>
				<td>Fire a mine behind the ship.</td>
				<td>None (gamepad required)</td>
				<td><b>B</b></td>
			</tr>
      <tr>
        <td>Leave the game.</td>
        <td>None (gamepad required)</td>
        <td>Hold <b>B</b> for several seconds.</td>
      </tr>
      <tr>
        <td>Pause the game.</td>
        <td>ESC</td>
        <td>
          <b>START</b>, <b>BACK</b>
        </td>
      </tr>
    </table>
	</div>

	<a name="ID2E3G"></a><h1 class="heading">Implementation Notes</h1><div id="ID2E3G" class="hxnx1">
		

		<a name="ID2EAH"></a><h2 class="subHeading">"Vector" Rendering</h2><div id="ID2EAH" class="hxnx2">
			
			<p>
				The "Vector" in "Vector Rumble" refers to the line-based method of drawing all game objects.  The <code>LineBatch</code> class has an interface similar to <b>SpriteBatch</b>, and renders the "vectors" using <b>PrimitiveType.LineList</b>.  The geometry is rendered using <b>BasicEffect</b>.
			</p>
			<p>
				The particle system implementation in Vector Rumble, found in the <code>ParticleSystem</code> class, differs from the particle systems found in the Particle System samples.  Instead of small quads—sets of two triangles forming a rectangle—for each particle, the particle system in Vector Rumble uses the <code>LineBatch</code> implementation.  The management of the particles and their lifetimes is similar to the samples' treatment.
			</p>
      <p>The starfield moving behind the game, found in the <code>Starfield</code> class, does not use <code>LineBatch</code>. Instead, it uses <b>SpriteBatch</b> and a small, empty texture, colorized by the <b>SpriteBatch.Draw()</b> call.  Each star has a depth value associated with it, which is used to control how far it moves when the starfield pans, giving the illusion of depth.
    </p>
		</div>

		<a name="ID2EHAAC"></a><h2 class="subHeading">Entity Management</h2><div id="ID2EHAAC" class="hxnx2">
			
      <p>
        The entity management and collision systems in Vector Rumble are simple, given the small number of objects in any game.  The systems use polymorphism to ensure a consistent set of interactions between all in-game objects, which all derive from the <code>Actor</code> class.
      </p>
		</div>

    <a name="ID2ERAAC"></a><h2 class="subHeading">CollectCollection</h2><div id="ID2ERAAC" class="hxnx2">
      
      <p>
        The <code>CollectCollection</code> class allows the game loop to target <code>Actor</code> objects for removal from the game without actually removing them from the list.  Removing an item from a list invalidates all iterators, which would disrupt the update loop.  Objects to be removed are added to the Garbage list, and when the <code>CollectCollection.Collect()</code> method is called, the items in the Garbage list are removed from the main list (and the Garbage list is cleared).
      </p>
    </div>

    <a name="ID2E6AAC"></a><h2 class="subHeading">Reuse of Existing Samples</h2><div id="ID2E6AAC" class="hxnx2">
      
      <p>
        Vector Rumble utilizes the game screen management architecture from the Game State Management sample.  The <code>BackgroundScreen</code> class animates several particle systems while it overlays various menus, and the <code>GameplayScreen</code> owns the <code>World</code> object that drives gameplay.
      </p>
      <p>
        This game also uses the bloom post-processing component from the Bloom Postprocess sample.  It is not added to the <code>Game</code> object's component list, as doing so would add bloom to all elements rendered by the screen management system, including the user interface elements.  The <code>GameplayScreen</code> object creates and manages the component, such that the game elements are processed by the component but not the user interface.
      </p>
    </div>

    <a name="ID2EUBAC"></a><h2 class="subHeading">Gameplay Constants</h2><div id="ID2EUBAC" class="hxnx2">
      
      <p>
        You can alter gameplay in many important ways by adjusting the constant variables, which you can find in the relevant classes, or in the <code>WorldRules</code> class for game-wide settings.
      </p>
    </div>

  </div>

  <a name="ID2E6BAC"></a><h1 class="heading">Extending Vector Rumble</h1><div id="ID2E6BAC" class="hxnx1">
    

    <p>There are many possible ways to improve on or extend Vector Rumble.</p>
			<ul>
        <li>Add more weapons or power-ups by using new classes that mirror the existing ones, along with modifying the <code>World.SpawnPowerUp()</code> function.</li>
        <li>Customize the <code>World.CreateWalls()</code> function to create any number of possible level configurations.</li>
        <li>Add new levels, where victory is scored and the play moves on to a different level.  This will require additional game-state management code to handle the additional game flow.</li>
        <li>Add interesting new strategies to the game by adding projectile interactions, such as projectiles that bounce off the walls.</li>
        <li>The collision system treats most of the in-game objects as circular, leading to some graphical anomalies, such as asteroids colliding outside their visible shape. Consider using the tutorial Collision Series 2: 2D Per-Pixel Collision to help create a pixel-accurace collision system.  Note that momentum-transferring collisions, such as those between asteroids, ships, and the walls, may be greatly complicated by this procedure.</li>
				<li>The motion-blur implementation is simple, but effective for this style of game.  An accumulation-based motion blur post-processing step may look superior, at the cost of decreased performance.</li>
        <li>Implement artificial-intelligence "bots," or possibly even network play on Windows using the <b>System.Net</b> library provided in the .NET Framework.  You may want to start by separating the control of the ship from the gamepad-handling techniques, generalizing to allow any source—gamepads, an artificial intelligence algorithm, or even network data—to control the ships.</li>
        <li>Try drawing the starfield with point primitives, using <b>PrimitiveType.PointList</b>.  This would likely involve a batching system similar to <code>LineBatch</code> or <b>SpriteBatch</b>.</li>
			</ul>
      <p>There are also many possible optimizations that you could make.  Many of these were not made because the current code is simpler, and the design of the game as it is today did not require them.</p>
      <ul>
        <li>
          Each game object could own its own <code>VectorPolygon</code> creation algorithm.  In addition, you could make those polygons static, and the transform applied to them in the <code>VectorPolygon.Transform()</code> function could be applied in an <b>Effect</b> instead.  However, this would require you to batch the transformations, since the <b>SpriteBatch</b>-style interface for batching lines does not allow this as it is currently implemented.  Depending on how the transformation batching was implemented, each transformed polygon may require its own batch.
        </li>
        <li>Similar transform optimizations could be applied to the <code>Starfield</code> sprites, in addition to the point-primitive change suggested above.</li>
        <li>The game allocates many objects on the heap during gameplay, which leads to occasional collections during gameplay.  These collections can be noticeable on the Xbox 360.  In the game as it is today, these are generally very slight, but it's generally good practice to make allocations before the main game loop begins.  The major culprits are <code>ParticleSystem</code> objects and <code>Projectile</code>-derived objects.  One possible solution would be to add factories for these objects—factories that could recycle these objects when they are no longer needed.
      </li>
        <li>The collision system currently checks every object against every other object.  A broad-pass collision check, to narrow the list of possible colliders, should improve performance.  A common broad-pass method is spatial partioning, which should work well in a game like Vector Rumble.  Note that the overhead from this additional pass isn't free, and with as few objects as Vector Rumble has, this optimization may or may not be worthwhile.  If Vector Rumble was modified to be more complex, then this optimization could be significant.</li>
        <li>There are many small optimizations that you could make throughout the code.  In general, the greatest gains will be made on high-frequency calls; for example, reducing operations that occurred for every particle in every frame would result in a large overall reduction, due to the large number of particles used.</li>
      </ul>
		</div>

</div><div class="footer" id="footer"><p>© 2008 Microsoft Corporation. All rights reserved.<br>Send feedback to <a href="mailto:xna@microsoft.com?subject=Documentation Feedback: Vector Rumble">xna@microsoft.com</a>.</p></div></div></body></html>